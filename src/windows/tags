!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.6	//
APPEND_FUNCTION	Logger.h	18;"	d
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	190;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	193;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	196;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	199;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	203;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	181;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	184;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	187;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	190;"	d	file:
ARCHITECTURE_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	194;"	d	file:
A_	Common.h	/^        A_ = 0, C_, G_, T_, N_,$/;"	e	enum:PreProcessTool::Base
A_	DGECommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:DGEProcessTool::Base
A_	MetaCommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:MetaPreProcessTool::Base
A_	SRNACommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:SRNAProcessTool::Base
BASE_DISTRIBUTIONS	Common.h	/^    const static string BASE_DISTRIBUTIONS = "Base_distributions_by_read_position";$/;"	v
BASE_DISTRIBUTIONS	DGECommon.h	/^const static string BASE_DISTRIBUTIONS = "Base_distributions_by_read_position";$/;"	v
BASE_DISTRIBUTIONS	MetaCommon.h	/^const static string BASE_DISTRIBUTIONS = "Base_distributions_by_read_position";$/;"	v
BASE_DISTRIBUTIONS	SRNACommon.h	/^const static string BASE_DISTRIBUTIONS = "Base_distributions_by_read_position";$/;"	v
BASE_QUALITY_VALUE_DISTRIBUTION	Common.h	/^    const static string BASE_QUALITY_VALUE_DISTRIBUTION = "Base_quality_value_distribution_by_read_position";$/;"	v
BASE_QUALITY_VALUE_DISTRIBUTION	DGECommon.h	/^const static string BASE_QUALITY_VALUE_DISTRIBUTION = "Base_quality_value_distribution_by_read_position";$/;"	v
BASE_QUALITY_VALUE_DISTRIBUTION	MetaCommon.h	/^const static string BASE_QUALITY_VALUE_DISTRIBUTION = "Base_quality_value_distribution_by_read_position";$/;"	v
BASE_QUALITY_VALUE_DISTRIBUTION	SRNACommon.h	/^const static string BASE_QUALITY_VALUE_DISTRIBUTION = "Base_quality_value_distribution_by_read_position";$/;"	v
Base	Common.h	/^    enum Base$/;"	g	namespace:PreProcessTool
Base	DGECommon.h	/^enum Base$/;"	g	namespace:DGEProcessTool
Base	MetaCommon.h	/^enum Base$/;"	g	namespace:MetaPreProcessTool
Base	SRNACommon.h	/^enum Base$/;"	g	namespace:SRNAProcessTool
CLEAN_FQ_PREFIX	Common.h	/^    const static string CLEAN_FQ_PREFIX = "Clean_";$/;"	v
CLEAN_FQ_PREFIX	DGECommon.h	/^const static string CLEAN_FQ_PREFIX = "Clean_";$/;"	v
CLEAN_FQ_PREFIX	MetaCommon.h	/^const static string CLEAN_FQ_PREFIX = "Clean_";$/;"	v
CLEAN_FQ_PREFIX	SRNACommon.h	/^const static string CLEAN_FQ_PREFIX = "Clean_";$/;"	v
CMAKE_BINARY_DIR	build/Makefile	/^CMAKE_BINARY_DIR = \/export\/data\/jiangshuai\/chenhaosen\/eclipse\/SoapNuke1.4\/build$/;"	m
CMAKE_COMMAND	build/Makefile	/^CMAKE_COMMAND = \/usr\/local\/bin\/cmake$/;"	m
CMAKE_EDIT_COMMAND	build/Makefile	/^CMAKE_EDIT_COMMAND = \/usr\/local\/bin\/ccmake$/;"	m
CMAKE_SOURCE_DIR	build/Makefile	/^CMAKE_SOURCE_DIR = \/export\/data\/jiangshuai\/chenhaosen\/eclipse\/SoapNuke1.4$/;"	m
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	10;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	13;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	16;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	19;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	22;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	25;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	28;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	32;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	34;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	36;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	40;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	43;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	46;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	49;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	52;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	55;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	58;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	63;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	74;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	77;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	83;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	86;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	89;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	12;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	15;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	18;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	21;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	24;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	27;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	30;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	34;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	36;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	38;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	42;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	45;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	48;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	51;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	54;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	57;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	60;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	65;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	68;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	74;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	77;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	80;"	d	file:
COMPILER_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	9;"	d	file:
C_	Common.h	/^        A_ = 0, C_, G_, T_, N_,$/;"	e	enum:PreProcessTool::Base
C_	DGECommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:DGEProcessTool::Base
C_	MetaCommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:MetaPreProcessTool::Base
C_	SRNACommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:SRNAProcessTool::Base
Compare	Common.h	/^    struct Compare$/;"	s	namespace:PreProcessTool
Compare	MetaCommon.h	/^struct Compare$/;"	s	namespace:MetaPreProcessTool
DGEPROCESSTOOL_COMMON_H_	DGECommon.h	13;"	d
DGEPROCESSTOOL_DGEPROCESSOR_H_	DGEProcessor.h	10;"	d
DGEProcessTool	DGECommon.cpp	/^namespace DGEProcessTool {$/;"	n	file:
DGEProcessTool	DGECommon.h	/^namespace DGEProcessTool {$/;"	n
DGEProcessTool	DGEProcessor.cpp	/^namespace DGEProcessTool {$/;"	n	file:
DGEProcessTool	DGEProcessor.h	/^namespace DGEProcessTool {$/;"	n
DGEProcessor	DGEProcessor.h	/^	DGEProcessor():$/;"	f	class:DGEProcessTool::DGEProcessor
DGEProcessor	DGEProcessor.h	/^class DGEProcessor$/;"	c	namespace:DGEProcessTool
DISTRIBUTION_OF_Q20_Q30	Common.h	/^    const static string DISTRIBUTION_OF_Q20_Q30 = "Distribution_of_Q20_Q30_bases_by_read_position";$/;"	v
DISTRIBUTION_OF_Q20_Q30	DGECommon.h	/^const static string DISTRIBUTION_OF_Q20_Q30 = "Distribution_of_Q20_Q30_bases_by_read_position";$/;"	v
DISTRIBUTION_OF_Q20_Q30	MetaCommon.h	/^const static string DISTRIBUTION_OF_Q20_Q30 = "Distribution_of_Q20_Q30_bases_by_read_position";$/;"	v
DISTRIBUTION_OF_Q20_Q30	SRNACommon.h	/^const static string DISTRIBUTION_OF_Q20_Q30 = "Distribution_of_Q20_Q30_bases_by_read_position";$/;"	v
FILTERED_READS	Common.h	/^    const static string FILTERED_READS = "Statistics_of_Filtered_Reads";$/;"	v
FILTERED_READS	DGECommon.h	/^const static string FILTERED_READS = "Statistics_of_Filtered_Reads.txt";$/;"	v
FILTERED_READS	MetaCommon.h	/^const static string FILTERED_READS = "Statistics_of_Filtered_Reads";$/;"	v
FILTERED_READS	SRNACommon.h	/^const static string FILTERED_READS = "Statistics_of_Filtered_Reads.txt";$/;"	v
FilterProcessor	FilterProcessor.cpp	/^    FilterProcessor::FilterProcessor() : PROCESS_THREAD_NUM(2), filterTile_(false), misMatch_(1), matchRatio_(0.5), lowQual_(5),$/;"	f	class:PreProcessTool::FilterProcessor
FilterProcessor	FilterProcessor.h	/^class FilterProcessor$/;"	c	namespace:PreProcessTool
FqBuffer	FqBuffer.cpp	/^FqBuffer::FqBuffer(const char *filename, int capacity, MODE mode, bool filterTile, const set<int> &tiles) :$/;"	f	class:PreProcessTool::FqBuffer
FqBuffer	FqBuffer.h	/^class FqBuffer$/;"	c	namespace:PreProcessTool
FqFile	FqFile.h	/^    FqFile(){}$/;"	f	class:PreProcessTool::FqFile
FqFile	FqFile.h	/^class FqFile $/;"	c	namespace:PreProcessTool
FqInfo	Common.h	/^        FqInfo()$/;"	f	struct:PreProcessTool::FqInfo
FqInfo	Common.h	/^    struct FqInfo$/;"	s	namespace:PreProcessTool
FqInfo	DGECommon.h	/^	FqInfo()$/;"	f	struct:DGEProcessTool::FqInfo
FqInfo	DGECommon.h	/^struct FqInfo$/;"	s	namespace:DGEProcessTool
FqInfo	MetaCommon.h	/^	FqInfo()$/;"	f	struct:MetaPreProcessTool::FqInfo
FqInfo	MetaCommon.h	/^struct FqInfo$/;"	s	namespace:MetaPreProcessTool
FqInfo	SRNACommon.h	/^	FqInfo()$/;"	f	struct:SRNAProcessTool::FqInfo
FqInfo	SRNACommon.h	/^struct FqInfo$/;"	s	namespace:SRNAProcessTool
G_	Common.h	/^        A_ = 0, C_, G_, T_, N_,$/;"	e	enum:PreProcessTool::Base
G_	DGECommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:DGEProcessTool::Base
G_	MetaCommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:MetaPreProcessTool::Base
G_	SRNACommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:SRNAProcessTool::Base
ID_VOID_MAIN	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	6;"	d	file:
ILLUMINA_	Common.h	/^        ILLUMINA_ = 64,$/;"	e	enum:PreProcessTool::QualitySystem
ILLUMINA_	DGECommon.h	/^	ILLUMINA_ = 64,$/;"	e	enum:DGEProcessTool::QualitySystem
ILLUMINA_	MetaCommon.h	/^	ILLUMINA_ = 64,$/;"	e	enum:MetaPreProcessTool::QualitySystem
ILLUMINA_	SRNACommon.h	/^	ILLUMINA_ = 64,$/;"	e	enum:SRNAProcessTool::QualitySystem
LENGTH_DISTRIBUTION	DGECommon.h	/^const static string LENGTH_DISTRIBUTION = "Length_distribution.txt";$/;"	v
LENGTH_DISTRIBUTION	SRNACommon.h	/^const static string LENGTH_DISTRIBUTION = "Length_distribution.txt";$/;"	v
LOG	Logger.h	19;"	d
LOGOUT_NAME	DGECommon.h	/^const static string LOGOUT_NAME = "out.log";$/;"	v
LOGOUT_NAME	SRNACommon.h	/^const static string LOGOUT_NAME = "out.log";$/;"	v
LOG_DEBUG	Logger.h	22;"	d
LOG_ERROR	Logger.h	25;"	d
LOG_FATAL	Logger.h	26;"	d
LOG_FILE	Common.h	/^    const static string LOG_FILE = "out.log";$/;"	v
LOG_FILE	MetaCommon.h	/^const static string LOG_FILE = "out.log";$/;"	v
LOG_INFO	Logger.h	23;"	d
LOG_NOTICE	Logger.h	27;"	d
LOG_TRACE	Logger.h	21;"	d
LOG_WARN	Logger.h	24;"	d
MAX_LENGTH	Common.h	/^    const static int MAX_LENGTH = 256;$/;"	v
MAX_LENGTH	DGECommon.h	/^const static int MAX_LENGTH = 256;$/;"	v
MAX_LENGTH	MetaCommon.h	/^const static int MAX_LENGTH = 256;$/;"	v
MAX_LENGTH	SRNACommon.h	/^const static int MAX_LENGTH = 256;$/;"	v
MAX_QUALITY	Common.h	/^    const static int MAX_QUALITY = 100;$/;"	v
MAX_QUALITY	DGECommon.h	/^const static int MAX_QUALITY = 42;$/;"	v
MAX_QUALITY	MetaCommon.h	/^const static int MAX_QUALITY = 100;$/;"	v
MAX_QUALITY	SRNACommon.h	/^const static int MAX_QUALITY = 42;$/;"	v
MEM_UNIT	DGEProcessor.h	/^const int MEM_UNIT = 1024 * 1024;$/;"	v
MEM_UNIT	FilterProcessor.h	/^const int MEM_UNIT = 1024 * 1024;$/;"	v
MEM_UNIT	MetaProcessor.h	/^	const int MEM_UNIT = 1024 * 1024;$/;"	v
MEM_UNIT	SRNAProcessor.h	/^	const int MEM_UNIT = 1024 * 1024;$/;"	v
MODE	FqBuffer.h	/^	enum MODE$/;"	g	class:PreProcessTool::FqBuffer
MODE	PeBuffer.h	/^	enum MODE$/;"	g	class:PreProcessTool::PeBuffer
MetaPreProcessTool	MetaCommon.cpp	/^namespace MetaPreProcessTool {$/;"	n	file:
MetaPreProcessTool	MetaCommon.h	/^namespace MetaPreProcessTool {$/;"	n
MetaPreProcessTool	MetaProcessor.cpp	/^namespace MetaPreProcessTool$/;"	n	file:
MetaPreProcessTool	MetaProcessor.h	/^namespace MetaPreProcessTool$/;"	n
MetaProcessor	MetaProcessor.cpp	/^	MetaProcessor::MetaProcessor():$/;"	f	class:MetaPreProcessTool::MetaProcessor
MetaProcessor	MetaProcessor.h	/^	class MetaProcessor$/;"	c	namespace:MetaPreProcessTool
N_	Common.h	/^        A_ = 0, C_, G_, T_, N_,$/;"	e	enum:PreProcessTool::Base
N_	DGECommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:DGEProcessTool::Base
N_	MetaCommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:MetaPreProcessTool::Base
N_	SRNACommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:SRNAProcessTool::Base
PACKAGEVERSION	Main.cpp	22;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	101;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	104;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	107;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	110;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	113;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	116;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	119;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	122;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	125;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	128;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	131;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	134;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	137;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	143;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	146;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	149;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	152;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	155;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	158;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	161;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	164;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	167;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	170;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	173;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	176;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	179;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	101;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	104;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	107;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	110;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	113;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	116;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	119;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	122;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	125;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	128;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	134;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	137;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	140;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	143;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	146;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	149;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	152;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	155;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	158;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	161;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	164;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	167;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	170;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	92;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	95;"	d	file:
PLATFORM_ID	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	98;"	d	file:
PREPROCESSTOOL_3_LOCAL_COMMONINCLUDE_H_	CommonInclude.h	10;"	d
PREPROCESSTOOL_3_LOCAL_COMMON_H_	Common.h	10;"	d
PREPROCESSTOOL_3_LOCAL_DNAPROCESSOR_H_	FilterProcessor.h	10;"	d
PREPROCESSTOOL_3_LOCAL_FQBUFFER_H_	FqBuffer.h	10;"	d
PREPROCESSTOOL_3_LOCAL_FQFILE_H_	FqFile.h	2;"	d
PREPROCESSTOOL_3_LOCAL_METACOMMON_H_	MetaCommon.h	10;"	d
PREPROCESSTOOL_3_LOCAL_METAPROCESSOR_H_	MetaProcessor.h	9;"	d
PREPROCESSTOOL_3_LOCAL_PEBUFFER_H_	PeBuffer.h	10;"	d
PROCESS_THREAD_NUM	FilterProcessor.h	/^	unsigned int PROCESS_THREAD_NUM;$/;"	m	class:PreProcessTool::FilterProcessor
PROCESS_THREAD_NUM	MetaProcessor.h	/^			unsigned int PROCESS_THREAD_NUM;$/;"	m	class:MetaPreProcessTool::MetaProcessor
PeBuffer	PeBuffer.cpp	/^	PeBuffer::PeBuffer(const char *fq1Filename, const char *fq2Filename,$/;"	f	class:PreProcessTool::PeBuffer
PeBuffer	PeBuffer.h	/^class PeBuffer$/;"	c	namespace:PreProcessTool
PreProcessTool	Common.cpp	/^namespace PreProcessTool {$/;"	n	file:
PreProcessTool	Common.h	/^namespace PreProcessTool {$/;"	n
PreProcessTool	FilterProcessor.cpp	/^namespace PreProcessTool {$/;"	n	file:
PreProcessTool	FilterProcessor.h	/^namespace PreProcessTool {$/;"	n
PreProcessTool	FqBuffer.cpp	/^namespace PreProcessTool {$/;"	n	file:
PreProcessTool	FqBuffer.h	/^namespace PreProcessTool {$/;"	n
PreProcessTool	FqFile.cpp	/^namespace PreProcessTool {$/;"	n	file:
PreProcessTool	FqFile.h	/^namespace PreProcessTool {$/;"	n
PreProcessTool	PeBuffer.cpp	/^namespace PreProcessTool$/;"	n	file:
PreProcessTool	PeBuffer.h	/^namespace PreProcessTool {$/;"	n
QualitySystem	Common.h	/^    enum QualitySystem$/;"	g	namespace:PreProcessTool
QualitySystem	DGECommon.h	/^enum QualitySystem$/;"	g	namespace:DGEProcessTool
QualitySystem	MetaCommon.h	/^enum QualitySystem$/;"	g	namespace:MetaPreProcessTool
QualitySystem	SRNACommon.h	/^enum QualitySystem$/;"	g	namespace:SRNAProcessTool
RAW_FQ_PREFIX	Common.h	/^    const static string RAW_FQ_PREFIX = "Raw_";$/;"	v
RAW_FQ_PREFIX	MetaCommon.h	/^const static string RAW_FQ_PREFIX = "Raw_";$/;"	v
RB	FqBuffer.h	/^		RB, WB,$/;"	e	enum:PreProcessTool::FqBuffer::MODE
RB	PeBuffer.h	/^		RB, WB,$/;"	e	enum:PreProcessTool::PeBuffer::MODE
RM	build/Makefile	/^RM = \/usr\/local\/bin\/cmake -E remove -f$/;"	m
RNAProcessor	SRNAProcessor.h	/^			RNAProcessor():$/;"	f	class:SRNAProcessTool::RNAProcessor
RNAProcessor	SRNAProcessor.h	/^	class RNAProcessor$/;"	c	namespace:SRNAProcessTool
Read	Common.h	/^    }Read;$/;"	t	namespace:PreProcessTool	typeref:struct:PreProcessTool::__anon1
Read	MetaCommon.h	/^}Read;$/;"	t	namespace:MetaPreProcessTool	typeref:struct:MetaPreProcessTool::__anon3
ReadSeq	Common.h	/^        ReadSeq(const ReadSeq &rs)$/;"	f	struct:PreProcessTool::ReadSeq
ReadSeq	Common.h	/^        ReadSeq(int num)$/;"	f	struct:PreProcessTool::ReadSeq
ReadSeq	Common.h	/^    typedef struct ReadSeq$/;"	s	namespace:PreProcessTool
ReadSeq	Common.h	/^    }ReadSeq;$/;"	t	namespace:PreProcessTool	typeref:struct:PreProcessTool::ReadSeq
ReadSeq	MetaCommon.h	/^	ReadSeq(const ReadSeq &rs)$/;"	f	struct:MetaPreProcessTool::ReadSeq
ReadSeq	MetaCommon.h	/^	ReadSeq(int num)$/;"	f	struct:MetaPreProcessTool::ReadSeq
ReadSeq	MetaCommon.h	/^typedef struct ReadSeq$/;"	s	namespace:MetaPreProcessTool
ReadSeq	MetaCommon.h	/^}ReadSeq;$/;"	t	namespace:MetaPreProcessTool	typeref:struct:MetaPreProcessTool::ReadSeq
SANGER_	Common.h	/^        SANGER_ = 33,$/;"	e	enum:PreProcessTool::QualitySystem
SANGER_	DGECommon.h	/^	SANGER_ = 33,$/;"	e	enum:DGEProcessTool::QualitySystem
SANGER_	MetaCommon.h	/^	SANGER_ = 33,$/;"	e	enum:MetaPreProcessTool::QualitySystem
SANGER_	SRNACommon.h	/^	SANGER_ = 33,$/;"	e	enum:SRNAProcessTool::QualitySystem
SEQUENCING_QUALITY	Common.h	/^    const static string SEQUENCING_QUALITY = "Basic_Statistics_of_Sequencing_Quality";$/;"	v
SEQUENCING_QUALITY	DGECommon.h	/^const static string SEQUENCING_QUALITY = "Basic_Statistics_of_Sequencing_Quality.txt";$/;"	v
SEQUENCING_QUALITY	MetaCommon.h	/^const static string SEQUENCING_QUALITY = "Basic_Statistics_of_Sequencing_Quality";$/;"	v
SEQUENCING_QUALITY	SRNACommon.h	/^const static string SEQUENCING_QUALITY = "Basic_Statistics_of_Sequencing_Quality.txt";$/;"	v
SHELL	build/Makefile	/^SHELL = \/bin\/sh$/;"	m
SRNAPROCESSTOOL_COMMON_H_	SRNACommon.h	13;"	d
SRNAPROCESSTOOL_RNAPROCESSOR_H_	SRNAProcessor.h	10;"	d
SRNAProcessTool	SRNACleanFA.cpp	/^namespace SRNAProcessTool {$/;"	n	file:
SRNAProcessTool	SRNACleanFQ.cpp	/^namespace SRNAProcessTool {$/;"	n	file:
SRNAProcessTool	SRNACommon.cpp	/^namespace SRNAProcessTool {$/;"	n	file:
SRNAProcessTool	SRNACommon.h	/^namespace SRNAProcessTool {$/;"	n
SRNAProcessTool	SRNAProcessor.cpp	/^namespace SRNAProcessTool {$/;"	n	file:
SRNAProcessTool	SRNAProcessor.h	/^namespace SRNAProcessTool {$/;"	n
SUFFIXES	build/Makefile	/^SUFFIXES =$/;"	m
StatisInfo	DGEProcessor.h	/^	StatisInfo()$/;"	f	struct:DGEProcessTool::StatisInfo
StatisInfo	DGEProcessor.h	/^typedef struct StatisInfo$/;"	s	namespace:DGEProcessTool
StatisInfo	DGEProcessor.h	/^}StatisInfo;$/;"	t	namespace:DGEProcessTool	typeref:struct:DGEProcessTool::StatisInfo
StatisInfo	FilterProcessor.h	/^	StatisInfo()$/;"	f	struct:PreProcessTool::StatisInfo
StatisInfo	FilterProcessor.h	/^typedef struct StatisInfo$/;"	s	namespace:PreProcessTool
StatisInfo	FilterProcessor.h	/^}StatisInfo;$/;"	t	namespace:PreProcessTool	typeref:struct:PreProcessTool::StatisInfo
StatisInfo	MetaProcessor.h	/^		StatisInfo()$/;"	f	struct:MetaPreProcessTool::StatisInfo
StatisInfo	MetaProcessor.h	/^	typedef struct StatisInfo$/;"	s	namespace:MetaPreProcessTool
StatisInfo	MetaProcessor.h	/^	}StatisInfo;$/;"	t	namespace:MetaPreProcessTool	typeref:struct:MetaPreProcessTool::StatisInfo
StatisInfo	SRNAProcessor.h	/^		StatisInfo()$/;"	f	struct:SRNAProcessTool::StatisInfo
StatisInfo	SRNAProcessor.h	/^	typedef struct StatisInfo$/;"	s	namespace:SRNAProcessTool
StatisInfo	SRNAProcessor.h	/^	}StatisInfo;$/;"	t	namespace:SRNAProcessTool	typeref:struct:SRNAProcessTool::StatisInfo
StatisResult	FilterProcessor.h	/^	StatisResult()$/;"	f	struct:PreProcessTool::StatisResult
StatisResult	FilterProcessor.h	/^typedef struct StatisResult$/;"	s	namespace:PreProcessTool
StatisResult	FilterProcessor.h	/^}StatisResult;$/;"	t	namespace:PreProcessTool	typeref:struct:PreProcessTool::StatisResult
StatisResult	MetaProcessor.h	/^		StatisResult()$/;"	f	struct:MetaPreProcessTool::StatisResult
StatisResult	MetaProcessor.h	/^	typedef struct StatisResult$/;"	s	namespace:MetaPreProcessTool
StatisResult	MetaProcessor.h	/^	}StatisResult;$/;"	t	namespace:MetaPreProcessTool	typeref:struct:MetaPreProcessTool::StatisResult
StrRead	Common.h	/^    }StrRead;$/;"	t	namespace:PreProcessTool	typeref:struct:PreProcessTool::__anon2
THREADPOOL_DETAIL_FUTURE_IMPL_HPP_INCLUDED	threadpool/detail/future.hpp	18;"	d
THREADPOOL_DETAIL_LOCKING_PTR_HPP_INCLUDED	threadpool/detail/locking_ptr.hpp	22;"	d
THREADPOOL_DETAIL_SCOPE_GUARD_HPP_INCLUDED	threadpool/detail/scope_guard.hpp	18;"	d
THREADPOOL_DETAIL_WORKER_THREAD_HPP_INCLUDED	threadpool/detail/worker_thread.hpp	18;"	d
THREADPOOL_FUTURE_HPP_INCLUDED	threadpool/future.hpp	17;"	d
THREADPOOL_HPP_INCLUDED	threadpool.hpp	18;"	d
THREADPOOL_POOL_ADAPTORS_HPP_INCLUDED	threadpool/pool_adaptors.hpp	19;"	d
THREADPOOL_POOL_CORE_HPP_INCLUDED	threadpool/detail/pool_core.hpp	23;"	d
THREADPOOL_POOL_HPP_INCLUDED	threadpool/pool.hpp	23;"	d
THREADPOOL_SCHEDULING_POLICIES_HPP_INCLUDED	threadpool/scheduling_policies.hpp	23;"	d
THREADPOOL_SHUTDOWN_POLICIES_HPP_INCLUDED	threadpool/shutdown_policies.hpp	20;"	d
THREADPOOL_SIZE_POLICIES_HPP_INCLUDED	threadpool/size_policies.hpp	19;"	d
THREADPOOL_TASK_ADAPTERS_HPP_INCLUDED	threadpool/task_adaptors.hpp	18;"	d
T_	Common.h	/^        A_ = 0, C_, G_, T_, N_,$/;"	e	enum:PreProcessTool::Base
T_	DGECommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:DGEProcessTool::Base
T_	MetaCommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:MetaPreProcessTool::Base
T_	SRNACommon.h	/^	A_ = 0, C_, G_, T_, N_,$/;"	e	enum:SRNAProcessTool::Base
TaskParam	DGEProcessor.h	/^	TaskParam()$/;"	f	struct:DGEProcessTool::TaskParam
TaskParam	DGEProcessor.h	/^typedef struct TaskParam$/;"	s	namespace:DGEProcessTool
TaskParam	DGEProcessor.h	/^} TaskParam;$/;"	t	namespace:DGEProcessTool	typeref:struct:DGEProcessTool::TaskParam
TaskParam	FilterProcessor.h	/^	TaskParam()$/;"	f	struct:PreProcessTool::TaskParam
TaskParam	FilterProcessor.h	/^typedef struct TaskParam$/;"	s	namespace:PreProcessTool
TaskParam	FilterProcessor.h	/^} TaskParam;$/;"	t	namespace:PreProcessTool	typeref:struct:PreProcessTool::TaskParam
TaskParam	MetaProcessor.h	/^		TaskParam()$/;"	f	struct:MetaPreProcessTool::TaskParam
TaskParam	MetaProcessor.h	/^	typedef struct TaskParam$/;"	s	namespace:MetaPreProcessTool
TaskParam	MetaProcessor.h	/^	} TaskParam;$/;"	t	namespace:MetaPreProcessTool	typeref:struct:MetaPreProcessTool::TaskParam
TaskParam	SRNAProcessor.h	/^		TaskParam()$/;"	f	struct:SRNAProcessTool::TaskParam
TaskParam	SRNAProcessor.h	/^	typedef struct TaskParam$/;"	s	namespace:SRNAProcessTool
TaskParam	SRNAProcessor.h	/^	} TaskParam;$/;"	t	namespace:SRNAProcessTool	typeref:struct:SRNAProcessTool::TaskParam
WB	FqBuffer.h	/^		RB, WB,$/;"	e	enum:PreProcessTool::FqBuffer::MODE
WB	PeBuffer.h	/^		RB, WB,$/;"	e	enum:PreProcessTool::PeBuffer::MODE
_C_LOGGER_H	Logger.h	2;"	d
a	DGEProcessor.h	/^	int a, c, g, t, n, ns; \/\/ns 是指第截取tag的碱基N的个数\/\/$/;"	m	struct:DGEProcessTool::StatisInfo
a	FilterProcessor.h	/^	int a, c, g, t, n;$/;"	m	struct:PreProcessTool::StatisInfo
a	MetaProcessor.h	/^		int a, c, g, t, n;$/;"	m	struct:MetaPreProcessTool::StatisInfo
a	SRNAProcessor.h	/^		int a, c, g, t, n, ns; \/\/ns 是指第1-30个碱基内的N个数\/\/$/;"	m	struct:SRNAProcessTool::StatisInfo
active	threadpool/detail/pool_core.hpp	/^    size_t active() const volatile$/;"	f	class:boost::threadpool::detail::pool_core
active	threadpool/pool.hpp	/^    size_t active() const$/;"	f	class:boost::threadpool::thread_pool
adapter1_	FilterProcessor.h	/^	string adapter1_;$/;"	m	class:PreProcessTool::FilterProcessor
adapter1_	MetaProcessor.h	/^			string adapter1_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
adapter2_	FilterProcessor.h	/^	string adapter2_;$/;"	m	class:PreProcessTool::FilterProcessor
adapter2_	MetaProcessor.h	/^			string adapter2_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
adapter3Null	DGECommon.h	/^	unsigned long adapter3Null;$/;"	m	struct:DGEProcessTool::FqInfo
adapter3Null	SRNACommon.h	/^	unsigned long adapter3Null;$/;"	m	struct:SRNAProcessTool::FqInfo
adapter3_	SRNAProcessor.h	/^			string adapter3_;$/;"	m	class:SRNAProcessTool::RNAProcessor
adapter5Pollute	DGECommon.h	/^	unsigned long adapter5Pollute;$/;"	m	struct:DGEProcessTool::FqInfo
adapter5Pollute	SRNACommon.h	/^	unsigned long adapter5Pollute;$/;"	m	struct:SRNAProcessTool::FqInfo
adapter5_	SRNAProcessor.h	/^			string adapter5_;$/;"	m	class:SRNAProcessTool::RNAProcessor
adapterLen1_	FilterProcessor.h	/^	int adapterLen1_;$/;"	m	class:PreProcessTool::FilterProcessor
adapterLen1_	MetaProcessor.h	/^			int adapterLen1_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
adapterLen2_	FilterProcessor.h	/^	int adapterLen2_;$/;"	m	class:PreProcessTool::FilterProcessor
adapterLen2_	MetaProcessor.h	/^			int adapterLen2_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
adapterNum	Common.h	/^        unsigned long adapterNum;  \/\/the number of read which contain adapter in raw data$/;"	m	struct:PreProcessTool::FqInfo
adapterNum	MetaCommon.h	/^	unsigned long adapterNum;  \/\/the number of read which contain adapter in raw data$/;"	m	struct:MetaPreProcessTool::FqInfo
adapterType	Common.cpp	/^	int adapterType(bool isPE, const string &adapter1, const string &adapter2)$/;"	f	namespace:PreProcessTool
adapterType	DGECommon.cpp	/^int adapterType(const string &adapter1, const string &adapter2)$/;"	f	namespace:DGEProcessTool
adapterType	MetaCommon.cpp	/^	int adapterType(bool isPE, const string &adapter1, const string &adapter2)$/;"	f	namespace:MetaPreProcessTool
adapterType	SRNACommon.cpp	/^int adapterType(const string &adapter1, const string &adapter2)$/;"	f	namespace:SRNAProcessTool
adapter_	DGEProcessor.h	/^	string adapter_;$/;"	m	class:DGEProcessTool::DGEProcessor
add	Common.h	/^        void add(const FqInfo &src)$/;"	f	struct:PreProcessTool::FqInfo
add	DGECommon.h	/^	void add(FqInfo &src, int readLen)$/;"	f	struct:DGEProcessTool::FqInfo
add	MetaCommon.h	/^	void add(const FqInfo &src)$/;"	f	struct:MetaPreProcessTool::FqInfo
add	SRNACommon.h	/^	void add(FqInfo &src, int readLen)$/;"	f	struct:SRNAProcessTool::FqInfo
adptSequence_	DGEProcessor.h	/^	map<string,int> adptSequence_;$/;"	m	class:DGEProcessTool::DGEProcessor
alignRate_	SRNAProcessor.h	/^			float alignRate_;$/;"	m	class:SRNAProcessTool::RNAProcessor
auxStatistics	DGEProcessor.cpp	/^	StatisInfo DGEProcessor::auxStatistics(PreProcessTool::Read &read, FqInfo &info)$/;"	f	class:DGEProcessTool::DGEProcessor
auxStatistics	FilterProcessor.cpp	/^    StatisInfo FilterProcessor::auxStatistics(Read *read, int headTrim, int tailTrim, string adapter, int adptLen, set<string> &readsName, FqInfo &info, StatisResult &sr)$/;"	f	class:PreProcessTool::FilterProcessor
auxStatistics	FilterProcessor.cpp	/^    StatisInfo FilterProcessor::auxStatistics(StrRead *read)$/;"	f	class:PreProcessTool::FilterProcessor
auxStatistics	MetaProcessor.cpp	/^	StatisInfo MetaProcessor::auxStatistics(PreProcessTool::Read *read, int trimLeft, string adapter, int adptLen, set<string> &readsName, FqInfo &info, StatisResult &sr)$/;"	f	class:MetaPreProcessTool::MetaProcessor
auxStatistics	SRNAProcessor.cpp	/^	StatisInfo RNAProcessor::auxStatistics(PreProcessTool::Read &read, FqInfo &info)$/;"	f	class:SRNAProcessTool::RNAProcessor
base	Common.h	/^        unsigned long base[MAX_LENGTH][5]; \/\/ACGT$/;"	m	struct:PreProcessTool::FqInfo
base	DGECommon.h	/^	unsigned long base[MAX_LENGTH][5]; \/\/ACGTN，使用枚举类型$/;"	m	struct:DGEProcessTool::FqInfo
base	MetaCommon.h	/^	unsigned long base[MAX_LENGTH][5]; \/\/ACGT$/;"	m	struct:MetaPreProcessTool::FqInfo
base	SRNACommon.h	/^	unsigned long base[MAX_LENGTH][5]; \/\/ACGTN，使用枚举类型$/;"	m	struct:SRNAProcessTool::FqInfo
baseQuality	Common.h	/^        char *baseQuality;$/;"	m	struct:PreProcessTool::__anon1
baseQuality	Common.h	/^        std::string baseQuality;$/;"	m	struct:PreProcessTool::__anon2
baseQuality	MetaCommon.h	/^	char *baseQuality;$/;"	m	struct:MetaPreProcessTool::__anon3
baseSequence	Common.h	/^        char *baseSequence;$/;"	m	struct:PreProcessTool::__anon1
baseSequence	Common.h	/^        std::string baseSequence;$/;"	m	struct:PreProcessTool::__anon2
baseSequence	MetaCommon.h	/^	char *baseSequence;$/;"	m	struct:MetaPreProcessTool::__anon3
boost	threadpool/detail/future.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n
boost	threadpool/detail/locking_ptr.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n
boost	threadpool/detail/pool_core.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n
boost	threadpool/detail/scope_guard.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n
boost	threadpool/detail/worker_thread.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n
boost	threadpool/future.hpp	/^namespace boost { namespace threadpool$/;"	n
boost	threadpool/pool.hpp	/^namespace boost { namespace threadpool$/;"	n
boost	threadpool/pool_adaptors.hpp	/^namespace boost { namespace threadpool$/;"	n
boost	threadpool/scheduling_policies.hpp	/^namespace boost { namespace threadpool$/;"	n
boost	threadpool/shutdown_policies.hpp	/^namespace boost { namespace threadpool$/;"	n
boost	threadpool/size_policies.hpp	/^namespace boost { namespace threadpool$/;"	n
boost	threadpool/task_adaptors.hpp	/^namespace boost { namespace threadpool$/;"	n
buf1_	PeBuffer.h	/^	char *buf1_;$/;"	m	class:PreProcessTool::PeBuffer
buf2_	PeBuffer.h	/^	char *buf2_;$/;"	m	class:PreProcessTool::PeBuffer
buf_	FqBuffer.h	/^	char *buf_;$/;"	m	class:PreProcessTool::FqBuffer
c	DGEProcessor.h	/^	int a, c, g, t, n, ns; \/\/ns 是指第截取tag的碱基N的个数\/\/$/;"	m	struct:DGEProcessTool::StatisInfo
c	FilterProcessor.h	/^	int a, c, g, t, n;$/;"	m	struct:PreProcessTool::StatisInfo
c	MetaProcessor.h	/^		int a, c, g, t, n;$/;"	m	struct:MetaPreProcessTool::StatisInfo
c	SRNAProcessor.h	/^		int a, c, g, t, n, ns; \/\/ns 是指第1-30个碱基内的N个数\/\/$/;"	m	struct:SRNAProcessTool::StatisInfo
calculateBaseDistribute	FilterProcessor.cpp	/^    void FilterProcessor::calculateBaseDistribute(Read* read, FqInfo &info, int readLen)$/;"	f	class:PreProcessTool::FilterProcessor
calculateBaseDistribute	FilterProcessor.cpp	/^    void FilterProcessor::calculateBaseDistribute(StrRead* read, FqInfo &info, int readLen)$/;"	f	class:PreProcessTool::FilterProcessor
cancel	threadpool/detail/future.hpp	/^   bool cancel() volatile$/;"	f	class:boost::threadpool::detail::future_impl
cancel	threadpool/future.hpp	/^   bool cancel()$/;"	f	class:boost::threadpool::future
capacity_	FqBuffer.h	/^	int capacity_;$/;"	m	class:PreProcessTool::FqBuffer
capacity_	PeBuffer.h	/^	int capacity_;$/;"	m	class:PreProcessTool::PeBuffer
chr_	DGEProcessor.h	/^	string chr_;$/;"	m	class:DGEProcessTool::DGEProcessor
cleanBaseA	Common.h	/^        unsigned long cleanBaseA;   \/\/clean data base A number$/;"	m	struct:PreProcessTool::FqInfo
cleanBaseA	DGECommon.h	/^	unsigned long cleanBaseA; \/\/cleanfq文件所有read中碱基A的总数$/;"	m	struct:DGEProcessTool::FqInfo
cleanBaseA	MetaCommon.h	/^	unsigned long cleanBaseA;   \/\/clean data base A number$/;"	m	struct:MetaPreProcessTool::FqInfo
cleanBaseA	SRNACommon.h	/^	unsigned long cleanBaseA; \/\/cleanfq文件所有read中碱基A的总数$/;"	m	struct:SRNAProcessTool::FqInfo
cleanBaseC	Common.h	/^        unsigned long cleanBaseC; \/\/clean data base C number$/;"	m	struct:PreProcessTool::FqInfo
cleanBaseC	DGECommon.h	/^	unsigned long cleanBaseC; \/\/cleanfq文件所有read中碱基C的总数$/;"	m	struct:DGEProcessTool::FqInfo
cleanBaseC	MetaCommon.h	/^	unsigned long cleanBaseC; \/\/clean data base C number$/;"	m	struct:MetaPreProcessTool::FqInfo
cleanBaseC	SRNACommon.h	/^	unsigned long cleanBaseC; \/\/cleanfq文件所有read中碱基C的总数$/;"	m	struct:SRNAProcessTool::FqInfo
cleanBaseG	Common.h	/^        unsigned long cleanBaseG; \/\/clean data base G number$/;"	m	struct:PreProcessTool::FqInfo
cleanBaseG	DGECommon.h	/^	unsigned long cleanBaseG; \/\/cleanfq文件所有read中碱基C的总数$/;"	m	struct:DGEProcessTool::FqInfo
cleanBaseG	MetaCommon.h	/^	unsigned long cleanBaseG; \/\/clean data base G number$/;"	m	struct:MetaPreProcessTool::FqInfo
cleanBaseG	SRNACommon.h	/^	unsigned long cleanBaseG; \/\/cleanfq文件所有read中碱基C的总数$/;"	m	struct:SRNAProcessTool::FqInfo
cleanBaseN	Common.h	/^        unsigned long cleanBaseN; \/\/clean data base N number$/;"	m	struct:PreProcessTool::FqInfo
cleanBaseN	DGECommon.h	/^	unsigned long cleanBaseN; \/\/cleanfq文件所有read中碱基为N的总数$/;"	m	struct:DGEProcessTool::FqInfo
cleanBaseN	MetaCommon.h	/^	unsigned long cleanBaseN; \/\/clean data base N number$/;"	m	struct:MetaPreProcessTool::FqInfo
cleanBaseN	SRNACommon.h	/^	unsigned long cleanBaseN; \/\/cleanfq文件所有read中碱基为N的总数$/;"	m	struct:SRNAProcessTool::FqInfo
cleanBaseNum_	MetaProcessor.h	/^			unsigned long cleanBaseNum_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
cleanBaseT	Common.h	/^        unsigned long cleanBaseT; \/\/clean data base T number$/;"	m	struct:PreProcessTool::FqInfo
cleanBaseT	DGECommon.h	/^	unsigned long cleanBaseT; \/\/cleanfq文件所有read中碱基T的总数$/;"	m	struct:DGEProcessTool::FqInfo
cleanBaseT	MetaCommon.h	/^	unsigned long cleanBaseT; \/\/clean data base T number$/;"	m	struct:MetaPreProcessTool::FqInfo
cleanBaseT	SRNACommon.h	/^	unsigned long cleanBaseT; \/\/cleanfq文件所有read中碱基T的总数$/;"	m	struct:SRNAProcessTool::FqInfo
cleanDataIndexs_	FilterProcessor.h	/^	unsigned int *cleanDataIndexs_;  \/\/存放处理线程判断为clean read的那些read在buffer中的下标$/;"	m	class:PreProcessTool::FilterProcessor
cleanDataIndexs_	MetaProcessor.h	/^			unsigned int *cleanDataIndexs_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
cleanFa_	DGEProcessor.h	/^	vector< map<string,int>::iterator > cleanFa_;$/;"	m	class:DGEProcessTool::DGEProcessor
cleanFq1_	FilterProcessor.h	/^	string cleanFq1_;$/;"	m	class:PreProcessTool::FilterProcessor
cleanFq2_	FilterProcessor.h	/^	string cleanFq2_;$/;"	m	class:PreProcessTool::FilterProcessor
cleanQ20	Common.h	/^        unsigned long cleanQ20; \/\/cleanfq文件中碱基质量>=20的碱基总数$/;"	m	struct:PreProcessTool::FqInfo
cleanQ20	DGECommon.h	/^	unsigned long cleanQ20; \/\/cleanfq文件中碱基质量>=20的碱基总数$/;"	m	struct:DGEProcessTool::FqInfo
cleanQ20	MetaCommon.h	/^	unsigned long cleanQ20; \/\/cleanfq文件中碱基质量>=20的碱基总数$/;"	m	struct:MetaPreProcessTool::FqInfo
cleanQ20	SRNACommon.h	/^	unsigned long cleanQ20; \/\/cleanfq文件中碱基质量>=20的碱基总数$/;"	m	struct:SRNAProcessTool::FqInfo
cleanQ30	Common.h	/^        unsigned long cleanQ30; \/\/cleanfq文件中碱基质量>=30的碱基总数$/;"	m	struct:PreProcessTool::FqInfo
cleanQ30	DGECommon.h	/^	unsigned long cleanQ30; \/\/cleanfq文件中碱基质量>=30的碱基总数$/;"	m	struct:DGEProcessTool::FqInfo
cleanQ30	MetaCommon.h	/^	unsigned long cleanQ30; \/\/cleanfq文件中碱基质量>=30的碱基总数$/;"	m	struct:MetaPreProcessTool::FqInfo
cleanQ30	SRNACommon.h	/^	unsigned long cleanQ30; \/\/cleanfq文件中碱基质量>=30的碱基总数$/;"	m	struct:SRNAProcessTool::FqInfo
cleanQualSys_	FilterProcessor.h	/^	QualitySystem cleanQualSys_;$/;"	m	class:PreProcessTool::FilterProcessor
cleanQualSys_	MetaProcessor.h	/^			QualitySystem cleanQualSys_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
cleanReadLength	Common.h	/^        unsigned int cleanReadLength;   \/\/clean data 读长$/;"	m	struct:PreProcessTool::FqInfo
cleanReadLength	MetaCommon.h	/^	unsigned int cleanReadLength;   \/\/clean data 读长$/;"	m	struct:MetaPreProcessTool::FqInfo
cleanReadLengthTmp	MetaCommon.h	/^	unsigned int cleanReadLengthTmp;$/;"	m	struct:MetaPreProcessTool::FqInfo
cleanTotalBaseNum	Common.h	/^        unsigned long cleanTotalBaseNum; \/\/clean data total base number$/;"	m	struct:PreProcessTool::FqInfo
cleanTotalBaseNum	MetaCommon.h	/^	unsigned long cleanTotalBaseNum; \/\/clean data total base number$/;"	m	struct:MetaPreProcessTool::FqInfo
cleanTotalBases	DGECommon.h	/^	unsigned long cleanTotalBases; \/\/cleanfq文件的碱基总数$/;"	m	struct:DGEProcessTool::FqInfo
cleanTotalBases	SRNACommon.h	/^	unsigned long cleanTotalBases; \/\/cleanfq文件的碱基总数$/;"	m	struct:SRNAProcessTool::FqInfo
cleanTotalReadNum	Common.h	/^        unsigned long cleanTotalReadNum;\/\/clean data read 个数$/;"	m	struct:PreProcessTool::FqInfo
cleanTotalReadNum	MetaCommon.h	/^	unsigned long cleanTotalReadNum;\/\/clean data read 个数$/;"	m	struct:MetaPreProcessTool::FqInfo
cleanTotalReads	DGECommon.h	/^	unsigned long cleanTotalReads; \/\/cleanfq文件的read总数$/;"	m	struct:DGEProcessTool::FqInfo
cleanTotalReads	SRNACommon.h	/^	unsigned long cleanTotalReads; \/\/cleanfq文件的read总数$/;"	m	struct:SRNAProcessTool::FqInfo
clean_base	Common.h	/^        unsigned long clean_base[MAX_LENGTH][5];$/;"	m	struct:PreProcessTool::FqInfo
clean_base	MetaCommon.h	/^	unsigned long clean_base[MAX_LENGTH][5];$/;"	m	struct:MetaPreProcessTool::FqInfo
clean_q20q30	Common.h	/^        unsigned long clean_q20q30[MAX_LENGTH][2];$/;"	m	struct:PreProcessTool::FqInfo
clean_q20q30	MetaCommon.h	/^	unsigned long clean_q20q30[MAX_LENGTH][2];$/;"	m	struct:MetaPreProcessTool::FqInfo
clean_qual	Common.h	/^        unsigned long clean_qual[MAX_LENGTH][MAX_QUALITY + 1];$/;"	m	struct:PreProcessTool::FqInfo
clean_qual	MetaCommon.h	/^	unsigned long clean_qual[MAX_LENGTH][MAX_QUALITY + 1];$/;"	m	struct:MetaPreProcessTool::FqInfo
clear	Common.h	/^        void clear()$/;"	f	struct:PreProcessTool::FqInfo
clear	MetaCommon.h	/^	void clear()$/;"	f	struct:MetaPreProcessTool::FqInfo
clear	threadpool/detail/pool_core.hpp	/^    void clear() volatile$/;"	f	class:boost::threadpool::detail::pool_core
clear	threadpool/pool.hpp	/^    void clear()$/;"	f	class:boost::threadpool::thread_pool
clear	threadpool/scheduling_policies.hpp	/^    void clear()$/;"	f	class:boost::threadpool::fifo_scheduler
clear	threadpool/scheduling_policies.hpp	/^    void clear()$/;"	f	class:boost::threadpool::lifo_scheduler
clear	threadpool/scheduling_policies.hpp	/^    void clear()$/;"	f	class:boost::threadpool::prio_scheduler
clearFqInfo	DGECommon.cpp	/^void clearFqInfo(FqInfo &fqInfo)$/;"	f	namespace:DGEProcessTool
clearFqInfo	SRNACommon.cpp	/^void clearFqInfo(FqInfo &fqInfo)$/;"	f	namespace:SRNAProcessTool
continuousAlign_	SRNAProcessor.h	/^			int continuousAlign_;$/;"	m	class:SRNAProcessTool::RNAProcessor
create_and_attach	threadpool/detail/worker_thread.hpp	/^	  static void create_and_attach(shared_ptr<pool_type> const & pool)$/;"	f	class:boost::threadpool::detail::worker_thread
cutOff_	DGEProcessor.h	/^	int cutOff_;$/;"	m	class:DGEProcessTool::DGEProcessor
cutOff_	SRNAProcessor.h	/^			unsigned long cutOff_;$/;"	m	class:SRNAProcessTool::RNAProcessor
cutReadNum_	FilterProcessor.h	/^	unsigned long cutReadNum_;  \/\/截取指定数据量clean data的碱基量,单位M, 0表示不截取$/;"	m	class:PreProcessTool::FilterProcessor
detail	threadpool/detail/future.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
detail	threadpool/detail/locking_ptr.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
detail	threadpool/detail/pool_core.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
detail	threadpool/detail/scope_guard.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
detail	threadpool/detail/worker_thread.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost::threadpool
died_unexpectedly	threadpool/detail/worker_thread.hpp	/^	void died_unexpectedly()$/;"	f	class:boost::threadpool::detail::worker_thread
disable	threadpool/detail/scope_guard.hpp	/^	void disable()$/;"	f	class:boost::threadpool::detail::scope_guard
doneNum_	FilterProcessor.h	/^	boost::uint32_t doneNum_;  \/\/处理完的线程数$/;"	m	class:PreProcessTool::FilterProcessor
doneNum_	MetaProcessor.h	/^			boost::uint32_t doneNum_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
dupMutex_	FilterProcessor.h	/^	boost::mutex dupMutex_;$/;"	m	class:PreProcessTool::FilterProcessor
duplicationNum	Common.h	/^        unsigned long duplicationNum; \/\/重复个数$/;"	m	struct:PreProcessTool::FqInfo
duplicationNum	MetaCommon.h	/^	unsigned long duplicationNum; \/\/重复个数$/;"	m	struct:MetaPreProcessTool::FqInfo
duplications_	FilterProcessor.h	/^	map<string, int> duplications_;    \/\/存放fq1和fq2的read碱基序列连接起来的字符串,用于判断是否有重复$/;"	m	class:PreProcessTool::FilterProcessor
empty	threadpool/detail/pool_core.hpp	/^    bool empty() const volatile$/;"	f	class:boost::threadpool::detail::pool_core
empty	threadpool/pool.hpp	/^    bool empty() const$/;"	f	class:boost::threadpool::thread_pool
empty	threadpool/scheduling_policies.hpp	/^    bool empty() const$/;"	f	class:boost::threadpool::fifo_scheduler
empty	threadpool/scheduling_policies.hpp	/^    bool empty() const$/;"	f	class:boost::threadpool::lifo_scheduler
empty	threadpool/scheduling_policies.hpp	/^    bool empty() const$/;"	f	class:boost::threadpool::prio_scheduler
empty_controller	threadpool/size_policies.hpp	/^    empty_controller(typename Pool::size_policy_type&, shared_ptr<Pool>) {}$/;"	f	struct:boost::threadpool::empty_controller
empty_controller	threadpool/size_policies.hpp	/^  struct empty_controller$/;"	s	namespace:boost::threadpool
encodSize_	FilterProcessor.h	/^	int encodSize_;  \/\/read的碱基序列编码所需长度$/;"	m	class:PreProcessTool::FilterProcessor
encode	Common.cpp	/^	void encode(string &seq, ReadSeq &base)$/;"	f	namespace:PreProcessTool
encode	MetaCommon.cpp	/^	void encode(string &seq, ReadSeq &base)$/;"	f	namespace:MetaPreProcessTool
errorRate_	SRNAProcessor.h	/^			float errorRate_;$/;"	m	class:SRNAProcessTool::RNAProcessor
error_	SRNAProcessor.h	/^			float error_;$/;"	m	class:SRNAProcessTool::RNAProcessor
execute_task	threadpool/detail/pool_core.hpp	/^    bool execute_task() volatile$/;"	f	class:boost::threadpool::detail::pool_core
fastq_	SRNAProcessor.h	/^			bool fastq_;$/;"	m	class:SRNAProcessTool::RNAProcessor
fifo_pool	threadpool/pool.hpp	/^  typedef thread_pool<task_func, fifo_scheduler, static_size, resize_controller, wait_for_all_tasks> fifo_pool;$/;"	t	namespace:boost::threadpool
fifo_scheduler	threadpool/scheduling_policies.hpp	/^  class fifo_scheduler$/;"	c	namespace:boost::threadpool
file1_	PeBuffer.h	/^	gzFile file1_;$/;"	m	class:PreProcessTool::PeBuffer
file2_	PeBuffer.h	/^	gzFile file2_;$/;"	m	class:PreProcessTool::PeBuffer
file_	FqBuffer.h	/^	gzFile file_;$/;"	m	class:PreProcessTool::FqBuffer
filter	FilterProcessor.cpp	/^    int FilterProcessor::filter(int argc, char **argv)$/;"	f	class:PreProcessTool::FilterProcessor
filterAdapter_	FilterProcessor.h	/^	bool filterAdapter_;   \/\/是否需要过滤adapter$/;"	m	class:PreProcessTool::FilterProcessor
filterFA	SRNACleanFA.cpp	/^	bool RNAProcessor::filterFA(const string & sequence, int & count, FqInfo &info)$/;"	f	class:SRNAProcessTool::RNAProcessor
filterIndex_	DGEProcessor.h	/^	bool filterIndex_;$/;"	m	class:DGEProcessTool::DGEProcessor
filterIndex_	FilterProcessor.h	/^	bool filterIndex_;    \/\/indicate whether filter the read name's index or not$/;"	m	class:PreProcessTool::FilterProcessor
filterIndex_	SRNAProcessor.h	/^			bool filterIndex_;$/;"	m	class:SRNAProcessTool::RNAProcessor
filterLowQual_	DGEProcessor.h	/^	bool filterLowQual_;$/;"	m	class:DGEProcessTool::DGEProcessor
filterLowQual_	SRNAProcessor.h	/^			bool filterLowQual_;$/;"	m	class:SRNAProcessTool::RNAProcessor
filterMeta	MetaProcessor.cpp	/^	int MetaProcessor::filterMeta(int argc, char** argv)$/;"	f	class:MetaPreProcessTool::MetaProcessor
filterPolyA_	SRNAProcessor.h	/^			float filterPolyA_;$/;"	m	class:SRNAProcessTool::RNAProcessor
filterPolyN_	SRNAProcessor.h	/^			float filterPolyN_;$/;"	m	class:SRNAProcessTool::RNAProcessor
filterRawTags	SRNACleanFA.cpp	/^	void RNAProcessor::filterRawTags(map<string, int> &rawSequence, FqInfo &info)$/;"	f	class:SRNAProcessTool::RNAProcessor
filterTile_	DGEProcessor.h	/^	bool filterTile_;$/;"	m	class:DGEProcessTool::DGEProcessor
filterTile_	FilterProcessor.h	/^	bool filterTile_;$/;"	m	class:PreProcessTool::FilterProcessor
filterTile_	FqBuffer.h	/^	bool filterTile_;$/;"	m	class:PreProcessTool::FqBuffer
filterTile_	MetaProcessor.h	/^			bool filterTile_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
filterTile_	PeBuffer.h	/^	bool filterTile_;$/;"	m	class:PreProcessTool::PeBuffer
filterTile_	SRNAProcessor.h	/^			bool filterTile_;$/;"	m	class:SRNAProcessTool::RNAProcessor
filterTmpNumber_	SRNAProcessor.h	/^			int filterTmpNumber_;$/;"	m	class:SRNAProcessTool::RNAProcessor
findAdapter	DGEProcessor.cpp	/^	bool DGEProcessor::findAdapter(const char *sequence, const char *adapter)$/;"	f	class:DGEProcessTool::DGEProcessor
findAdapter	SRNAProcessor.cpp	/^	int RNAProcessor::findAdapter(const char *sequence, const char *adapter)$/;"	f	class:SRNAProcessTool::RNAProcessor
fqFile1_	DGEProcessor.h	/^	string fqFile1_;$/;"	m	class:DGEProcessTool::DGEProcessor
fqFile1_	FilterProcessor.h	/^	string fqFile1_;$/;"	m	class:PreProcessTool::FilterProcessor
fqFile1_	MetaProcessor.h	/^			string fqFile1_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
fqFile1_	SRNAProcessor.h	/^			string fqFile1_;$/;"	m	class:SRNAProcessTool::RNAProcessor
fqFile2_	DGEProcessor.h	/^	string fqFile2_;$/;"	m	class:DGEProcessTool::DGEProcessor
fqFile2_	FilterProcessor.h	/^	string fqFile2_;$/;"	m	class:PreProcessTool::FilterProcessor
fqFile2_	MetaProcessor.h	/^			string fqFile2_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
fqFile2_	SRNAProcessor.h	/^			string fqFile2_;$/;"	m	class:SRNAProcessTool::RNAProcessor
function_type	threadpool/detail/future.hpp	/^  typedef Function function_type;                   \/\/!< Indicates the function's type.$/;"	t	class:boost::threadpool::detail::future_impl_task_func
future	threadpool/future.hpp	/^  future()$/;"	f	class:boost::threadpool::future
future	threadpool/future.hpp	/^  future(shared_ptr<detail::future_impl<Result> > const & impl)$/;"	f	class:boost::threadpool::future
future	threadpool/future.hpp	/^class future$/;"	c	namespace:boost::threadpool
future_impl	threadpool/detail/future.hpp	/^  future_impl()$/;"	f	class:boost::threadpool::detail::future_impl
future_impl	threadpool/detail/future.hpp	/^class future_impl$/;"	c	namespace:boost::threadpool::detail
future_impl_task_func	threadpool/detail/future.hpp	/^  future_impl_task_func(function_type const & function, shared_ptr<future_type> const & future)$/;"	f	class:boost::threadpool::detail::future_impl_task_func
future_impl_task_func	threadpool/detail/future.hpp	/^class future_impl_task_func$/;"	c	namespace:boost::threadpool::detail
future_result_type	threadpool/detail/future.hpp	/^  typedef Result future_result_type; \/\/!< Indicates the future's result type.$/;"	t	class:boost::threadpool::detail::future_impl
future_result_type	threadpool/detail/future.hpp	/^  typedef typename result_of<function_type()>::type future_result_type; \/\/!< Indicates the future's result type.$/;"	t	class:boost::threadpool::detail::future_impl_task_func
future_result_type	threadpool/future.hpp	/^    typedef Result future_result_type; \/\/!< Indicates the future's result type.$/;"	t	class:boost::threadpool::future
future_type	threadpool/detail/future.hpp	/^  typedef Future<future_result_type> future_type;   \/\/!< Indicates the future's type.$/;"	t	class:boost::threadpool::detail::future_impl_task_func
future_type	threadpool/detail/future.hpp	/^  typedef future_impl<future_result_type> future_type;$/;"	t	class:boost::threadpool::detail::future_impl
g	DGEProcessor.h	/^	int a, c, g, t, n, ns; \/\/ns 是指第截取tag的碱基N的个数\/\/$/;"	m	struct:DGEProcessTool::StatisInfo
g	FilterProcessor.h	/^	int a, c, g, t, n;$/;"	m	struct:PreProcessTool::StatisInfo
g	MetaProcessor.h	/^		int a, c, g, t, n;$/;"	m	struct:MetaPreProcessTool::StatisInfo
g	SRNAProcessor.h	/^		int a, c, g, t, n, ns; \/\/ns 是指第1-30个碱基内的N个数\/\/$/;"	m	struct:SRNAProcessTool::StatisInfo
g_logger	Logger.cpp	/^log4cplus::Logger g_logger = log4cplus::Logger::getInstance("Global Logger");$/;"	v
get	threadpool/future.hpp	/^   result_type get() \/\/ throw( thread::cancelation_exception, ... )$/;"	f	class:boost::threadpool::future
get3PLengthFromInfo	MetaProcessor.cpp	/^	int MetaProcessor::get3PLengthFromInfo(FqInfo &info)$/;"	f	class:MetaPreProcessTool::MetaProcessor
getBuf	FqBuffer.cpp	/^char* FqBuffer::getBuf()$/;"	f	class:PreProcessTool::FqBuffer
getBuf1	PeBuffer.cpp	/^	char* PeBuffer::getBuf1()$/;"	f	class:PreProcessTool::PeBuffer
getBuf2	PeBuffer.cpp	/^	char* PeBuffer::getBuf2()$/;"	f	class:PreProcessTool::PeBuffer
getInitReadSize	PeBuffer.cpp	/^	int PeBuffer::getInitReadSize()$/;"	f	class:PreProcessTool::PeBuffer
getLastIndex	FqBuffer.cpp	/^int FqBuffer::getLastIndex()$/;"	f	class:PreProcessTool::FqBuffer
getOutputFileName	Common.cpp	/^	string getOutputFileName(string filename, string prefix, string path)$/;"	f	namespace:PreProcessTool
getOutputFileName	DGECommon.cpp	/^string getOutputFileName(string filename, string path)$/;"	f	namespace:DGEProcessTool
getOutputFileName	MetaCommon.cpp	/^	string getOutputFileName(string filename, string prefix, string path)$/;"	f	namespace:MetaPreProcessTool
getOutputFileName	SRNACommon.cpp	/^string getOutputFileName(string filename, string path)$/;"	f	namespace:SRNAProcessTool
getReadSize	FqBuffer.cpp	/^int FqBuffer::getReadSize()$/;"	f	class:PreProcessTool::FqBuffer
getReadSize	PeBuffer.cpp	/^	int PeBuffer::getReadSize()$/;"	f	class:PreProcessTool::PeBuffer
getReads	FqBuffer.cpp	/^Read* FqBuffer::getReads()$/;"	f	class:PreProcessTool::FqBuffer
getReads	PeBuffer.cpp	/^	int PeBuffer::getReads()$/;"	f	class:PreProcessTool::PeBuffer
getReadsNameFromFile	FilterProcessor.cpp	/^    int FilterProcessor::getReadsNameFromFile(string filename, set<string> &readsName)$/;"	f	class:PreProcessTool::FilterProcessor
getReadsNameFromFile	MetaProcessor.cpp	/^	int MetaProcessor::getReadsNameFromFile(string filename, set<string> &readsName)$/;"	f	class:MetaPreProcessTool::MetaProcessor
getReadsOne	PeBuffer.cpp	/^	Read* PeBuffer::getReadsOne()$/;"	f	class:PreProcessTool::PeBuffer
getReadsTwo	PeBuffer.cpp	/^	Read* PeBuffer::getReadsTwo()$/;"	f	class:PreProcessTool::PeBuffer
getRealReadSize	FqBuffer.cpp	/^int FqBuffer::getRealReadSize()$/;"	f	class:PreProcessTool::FqBuffer
getTiles	Common.cpp	/^	void getTiles(string tiles, set<int> &tileSet)$/;"	f	namespace:PreProcessTool
getTrim3PLength	MetaProcessor.cpp	/^	int MetaProcessor::getTrim3PLength(string fqFile, int threadNum)$/;"	f	class:MetaPreProcessTool::MetaProcessor
getTrim3PLengthTask	MetaProcessor.cpp	/^	void MetaProcessor::getTrim3PLengthTask(TaskParam *param)$/;"	f	class:MetaPreProcessTool::MetaProcessor
getTrim5PPosition	MetaProcessor.cpp	/^	int MetaProcessor::getTrim5PPosition(const char* quality, int readLen)$/;"	f	class:MetaPreProcessTool::MetaProcessor
getlastIndex1	PeBuffer.cpp	/^	int PeBuffer::getlastIndex1()$/;"	f	class:PreProcessTool::PeBuffer
getlastIndex2	PeBuffer.cpp	/^	int PeBuffer::getlastIndex2()$/;"	f	class:PreProcessTool::PeBuffer
greyTotalReadNum	Common.h	/^        unsigned long greyTotalReadNum; \/\/用于去重,半干净的read, 有可能有重复$/;"	m	struct:PreProcessTool::FqInfo
hasAdapter	FilterProcessor.cpp	/^    bool FilterProcessor::hasAdapter(const char *sequence, int readLen, const char *adapter, int adptLen)$/;"	f	class:PreProcessTool::FilterProcessor
hasAdapter	FilterProcessor.cpp	/^    bool FilterProcessor::hasAdapter(set<string> &readsName, const char *seqName)$/;"	f	class:PreProcessTool::FilterProcessor
hasAdapter	MetaProcessor.cpp	/^	bool MetaProcessor::hasAdapter(const char *sequence, int readLen, const char *adapter, int adptLen)$/;"	f	class:MetaPreProcessTool::MetaProcessor
hasAdapter	MetaProcessor.cpp	/^	bool MetaProcessor::hasAdapter(set<string> &readsName, const char *seqName)$/;"	f	class:MetaPreProcessTool::MetaProcessor
hasAdapter	SRNAProcessor.cpp	/^	bool RNAProcessor::hasAdapter(const char *sequence, const char *adapter)$/;"	f	class:SRNAProcessTool::RNAProcessor
hasAdpt	FilterProcessor.h	/^	bool hasAdpt;$/;"	m	struct:PreProcessTool::StatisResult
hasAdpt	MetaProcessor.h	/^		bool hasAdpt;$/;"	m	struct:MetaPreProcessTool::StatisResult
hasPolyN	SRNACleanFA.cpp	/^	bool RNAProcessor::hasPolyN(char* sequence, int title, int num, ofstream &outFile, long polyNCount[][2], int wT)$/;"	f	class:SRNAProcessTool::RNAProcessor
headTrim2_	FilterProcessor.h	/^	int headTrim2_;  \/\/$/;"	m	class:PreProcessTool::FilterProcessor
headTrim_	DGEProcessor.h	/^	int headTrim_;$/;"	m	class:DGEProcessTool::DGEProcessor
headTrim_	FilterProcessor.h	/^	int headTrim_;   \/\/trim the 5' end of read some bp$/;"	m	class:PreProcessTool::FilterProcessor
headTrim_	SRNAProcessor.h	/^			int headTrim_;$/;"	m	class:SRNAProcessTool::RNAProcessor
ifs	FqFile.h	/^    std::ifstream ifs;$/;"	m	class:PreProcessTool::FqFile
immediately	threadpool/shutdown_policies.hpp	/^  class immediately$/;"	c	namespace:boost::threadpool
info1	DGEProcessor.h	/^	FqInfo info1;$/;"	m	struct:DGEProcessTool::TaskParam
info1	FilterProcessor.h	/^	FqInfo info1, info2;$/;"	m	struct:PreProcessTool::TaskParam
info1	MetaProcessor.h	/^		FqInfo info1, info2;$/;"	m	struct:MetaPreProcessTool::TaskParam
info1	SRNAProcessor.h	/^		FqInfo info1;$/;"	m	struct:SRNAProcessTool::TaskParam
info2	FilterProcessor.h	/^	FqInfo info1, info2;$/;"	m	struct:PreProcessTool::TaskParam
info2	MetaProcessor.h	/^		FqInfo info1, info2;$/;"	m	struct:MetaPreProcessTool::TaskParam
info_arch	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_arch	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_arch = "INFO" ":" "arch[" ARCHITECTURE_ID "]";$/;"	v
info_compiler	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_compiler	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_compiler = "INFO" ":" "compiler[" COMPILER_ID "]";$/;"	v
info_platform	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
info_platform	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^char const* info_platform = "INFO" ":" "platform[" PLATFORM_ID "]";$/;"	v
init	threadpool/size_policies.hpp	/^    static void init(Pool& pool, size_t const worker_count)$/;"	f	class:boost::threadpool::static_size
initReadSize_	PeBuffer.h	/^	int initReadSize_;$/;"	m	class:PreProcessTool::PeBuffer
init_logger	Logger.cpp	/^bool init_logger(const std::string &appenders, const std::string &log_out_pathname )$/;"	f
insertNull	DGECommon.h	/^	unsigned long insertNull;$/;"	m	struct:DGEProcessTool::FqInfo
insertNull	SRNACommon.h	/^	unsigned long insertNull;$/;"	m	struct:SRNAProcessTool::FqInfo
intToString	SRNAProcessor.cpp	/^	string RNAProcessor::intToString(int i)$/;"	f	class:SRNAProcessTool::RNAProcessor
isAdptList_	FilterProcessor.h	/^	bool isAdptList_;$/;"	m	class:PreProcessTool::FilterProcessor
isAdptList_	MetaProcessor.h	/^			bool isAdptList_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
isAlignLengthOK	MetaProcessor.cpp	/^	bool MetaProcessor::isAlignLengthOK(char *line)$/;"	f	class:MetaPreProcessTool::MetaProcessor
isFilterSmallInsertSize_	FilterProcessor.h	/^	bool isFilterSmallInsertSize_;  \/\/是否过滤掉insert size过短的$/;"	m	class:PreProcessTool::FilterProcessor
isFilterTile	FqBuffer.cpp	/^bool FqBuffer::isFilterTile(char *name)$/;"	f	class:PreProcessTool::FqBuffer
isFilterTile	PeBuffer.cpp	/^	bool PeBuffer::isFilterTile(char *name)$/;"	f	class:PreProcessTool::PeBuffer
isFull_	FilterProcessor.h	/^	bool isFull_;$/;"	m	class:PreProcessTool::FilterProcessor
isLowQual	FilterProcessor.h	/^	bool isLowQual;$/;"	m	struct:PreProcessTool::StatisResult
isLowQual	MetaProcessor.h	/^		bool isLowQual;$/;"	m	struct:MetaPreProcessTool::StatisResult
isPE_	FilterProcessor.h	/^	bool isPE_;$/;"	m	class:PreProcessTool::FilterProcessor
isPolyA	FilterProcessor.h	/^	bool isPolyA;$/;"	m	struct:PreProcessTool::StatisResult
isPolyN	MetaProcessor.h	/^		bool isPolyN;$/;"	m	struct:MetaPreProcessTool::StatisResult
isQualityCutOff	MetaProcessor.cpp	/^	bool MetaProcessor::isQualityCutOff(const char*quality, int left, int right)$/;"	f	class:MetaPreProcessTool::MetaProcessor
isSequence	Common.cpp	/^	bool isSequence(const string &seq)$/;"	f	namespace:PreProcessTool
isSequence	DGECommon.cpp	/^bool isSequence(const string &seq)$/;"	f	namespace:DGEProcessTool
isSequence	MetaCommon.cpp	/^	bool isSequence(const string &seq)$/;"	f	namespace:MetaPreProcessTool
isSequence	SRNACommon.cpp	/^bool isSequence(const string &seq)$/;"	f	namespace:SRNAProcessTool
isSmallSize	FilterProcessor.cpp	/^    bool FilterProcessor::isSmallSize(const char *sequence1, int readLen1, const char *sequence2, int readLen2)$/;"	f	class:PreProcessTool::FilterProcessor
is_cancelled	threadpool/detail/future.hpp	/^   bool is_cancelled() const volatile$/;"	f	class:boost::threadpool::detail::future_impl
is_cancelled	threadpool/future.hpp	/^   bool is_cancelled() const$/;"	f	class:boost::threadpool::future
join	threadpool/detail/worker_thread.hpp	/^	  void join()$/;"	f	class:boost::threadpool::detail::worker_thread
key_	SRNAProcessor.h	/^			char * key_;$/;"	m	class:SRNAProcessTool::RNAProcessor
lanID_	FilterProcessor.h	/^	string lanID_;$/;"	m	class:PreProcessTool::FilterProcessor
lastIndex1_	PeBuffer.h	/^	int lastIndex1_;$/;"	m	class:PreProcessTool::PeBuffer
lastIndex2_	PeBuffer.h	/^	int lastIndex2_;$/;"	m	class:PreProcessTool::PeBuffer
lastIndex_	FqBuffer.h	/^	int lastIndex_;$/;"	m	class:PreProcessTool::FqBuffer
left	DGEProcessor.h	/^	int left, right;$/;"	m	struct:DGEProcessTool::TaskParam
left	FilterProcessor.h	/^	int left, right;$/;"	m	struct:PreProcessTool::TaskParam
left	MetaProcessor.h	/^		int left, right;$/;"	m	struct:MetaPreProcessTool::TaskParam
left	SRNAProcessor.h	/^		int left, right;$/;"	m	struct:SRNAProcessTool::TaskParam
lengthDis	DGECommon.h	/^	unsigned long lengthDis[MAX_LENGTH];$/;"	m	struct:DGEProcessTool::FqInfo
lengthDis	SRNACommon.h	/^	unsigned long lengthDis[MAX_LENGTH];$/;"	m	struct:SRNAProcessTool::FqInfo
lengthEnd	DGECommon.h	/^	int lengthEnd;$/;"	m	struct:DGEProcessTool::FqInfo
lengthEnd	SRNACommon.h	/^	int lengthEnd;$/;"	m	struct:SRNAProcessTool::FqInfo
lengthStart	DGECommon.h	/^	int lengthStart;$/;"	m	struct:DGEProcessTool::FqInfo
lengthStart	SRNACommon.h	/^	int lengthStart;$/;"	m	struct:SRNAProcessTool::FqInfo
lengthThreshold_	MetaProcessor.h	/^			int lengthThreshold_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
lifo_pool	threadpool/pool.hpp	/^  typedef thread_pool<task_func, lifo_scheduler, static_size, resize_controller, wait_for_all_tasks> lifo_pool;$/;"	t	namespace:boost::threadpool
lifo_scheduler	threadpool/scheduling_policies.hpp	/^  class lifo_scheduler$/;"	c	namespace:boost::threadpool
lineNum1_	PeBuffer.h	/^	long lineNum1_; \/\/fq1 current line number$/;"	m	class:PreProcessTool::PeBuffer
lineNum2_	PeBuffer.h	/^	long lineNum2_; \/\/fq2 current line number$/;"	m	class:PreProcessTool::PeBuffer
lineNum_	FqBuffer.h	/^	long lineNum_;$/;"	m	class:PreProcessTool::FqBuffer
locking_ptr	threadpool/detail/locking_ptr.hpp	/^    locking_ptr(volatile T& obj, const volatile Mutex& mtx)$/;"	f	class:boost::threadpool::detail::locking_ptr
locking_ptr	threadpool/detail/locking_ptr.hpp	/^  class locking_ptr $/;"	c	namespace:boost::threadpool::detail
looped_task_func	threadpool/task_adaptors.hpp	/^    looped_task_func(function0<bool> const & function, unsigned int const interval = 0)$/;"	f	class:boost::threadpool::looped_task_func
looped_task_func	threadpool/task_adaptors.hpp	/^  class looped_task_func$/;"	c	namespace:boost::threadpool
lowMeanNum	Common.h	/^        unsigned long lowMeanNum;  \/\/low mean quality read number in raw data$/;"	m	struct:PreProcessTool::FqInfo
lowMeanNum	MetaCommon.h	/^	unsigned long lowMeanNum;  \/\/low mean quality read number in raw data$/;"	m	struct:MetaPreProcessTool::FqInfo
lowQual	FilterProcessor.h	/^	int lowQual;$/;"	m	struct:PreProcessTool::StatisInfo
lowQual	MetaProcessor.h	/^		int lowQual;$/;"	m	struct:MetaPreProcessTool::StatisInfo
lowQual1	SRNAProcessor.h	/^		int q20, q30, lowQual1,lowQual2;\/\/lowQual1是1-30碱基q<10的个数, lowQual2是1-30碱基q<13的个数.\/\/$/;"	m	struct:SRNAProcessTool::StatisInfo
lowQual2	SRNAProcessor.h	/^		int q20, q30, lowQual1,lowQual2;\/\/lowQual1是1-30碱基q<10的个数, lowQual2是1-30碱基q<13的个数.\/\/$/;"	m	struct:SRNAProcessTool::StatisInfo
lowQualNum	Common.h	/^        unsigned long lowQualNum;  \/\/low qualtiy read number in raw data$/;"	m	struct:PreProcessTool::FqInfo
lowQualNum	MetaCommon.h	/^	unsigned long lowQualNum;  \/\/low qualtiy read number in raw data$/;"	m	struct:MetaPreProcessTool::FqInfo
lowQualSeed1Num_	SRNAProcessor.h	/^			int lowQualSeed1Num_;$/;"	m	class:SRNAProcessTool::RNAProcessor
lowQualSeed1_	SRNAProcessor.h	/^			int lowQualSeed1_;$/;"	m	class:SRNAProcessTool::RNAProcessor
lowQualSeed2Num_	SRNAProcessor.h	/^			int lowQualSeed2Num_;$/;"	m	class:SRNAProcessTool::RNAProcessor
lowQualSeed2_	SRNAProcessor.h	/^			int lowQualSeed2_;$/;"	m	class:SRNAProcessTool::RNAProcessor
lowQual_	FilterProcessor.h	/^	int lowQual_;    \/\/low quality$/;"	m	class:PreProcessTool::FilterProcessor
lowQualityRate_	MetaProcessor.h	/^			float lowQualityRate_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
m_active_worker_count	threadpool/detail/pool_core.hpp	/^    volatile size_t m_active_worker_count;$/;"	m	class:boost::threadpool::detail::pool_core
m_break_ns	threadpool/task_adaptors.hpp	/^    unsigned int m_break_ns;             \/\/!< Duration of breaks in nano seconds.$/;"	m	class:boost::threadpool::looped_task_func
m_break_s	threadpool/task_adaptors.hpp	/^    unsigned int m_break_s;              \/\/!< Duration of breaks in seconds.$/;"	m	class:boost::threadpool::looped_task_func
m_condition_ready	threadpool/detail/future.hpp	/^    mutable condition m_condition_ready;	$/;"	m	class:boost::threadpool::detail::future_impl
m_container	threadpool/scheduling_policies.hpp	/^    std::deque<task_type> m_container;  \/\/!< Internal task container.	$/;"	m	class:boost::threadpool::fifo_scheduler
m_container	threadpool/scheduling_policies.hpp	/^    std::deque<task_type> m_container;  \/\/!< Internal task container.	$/;"	m	class:boost::threadpool::lifo_scheduler
m_container	threadpool/scheduling_policies.hpp	/^    std::priority_queue<task_type> m_container;  \/\/!< Internal task container.$/;"	m	class:boost::threadpool::prio_scheduler
m_core	threadpool/pool.hpp	/^    shared_ptr<pool_core_type>          m_core; \/\/ pimpl idiom$/;"	m	class:boost::threadpool::thread_pool
m_executing	threadpool/detail/future.hpp	/^    volatile bool m_executing;$/;"	m	class:boost::threadpool::detail::future_impl
m_function	threadpool/detail/future.hpp	/^  function_type             m_function;$/;"	m	class:boost::threadpool::detail::future_impl_task_func
m_function	threadpool/detail/scope_guard.hpp	/^	function0<void> const m_function;$/;"	m	class:boost::threadpool::detail::scope_guard
m_function	threadpool/task_adaptors.hpp	/^    function0<bool> m_function;   \/\/!< The task's function.$/;"	m	class:boost::threadpool::looped_task_func
m_function	threadpool/task_adaptors.hpp	/^    task_func m_function;     \/\/!< The task's function.$/;"	m	class:boost::threadpool::prio_task_func
m_future	threadpool/detail/future.hpp	/^  shared_ptr<future_type>   m_future;$/;"	m	class:boost::threadpool::detail::future_impl_task_func
m_impl	threadpool/future.hpp	/^  shared_ptr<detail::future_impl<Result> > m_impl;$/;"	m	class:boost::threadpool::future
m_is_active	threadpool/detail/scope_guard.hpp	/^	bool                  m_is_active;$/;"	m	class:boost::threadpool::detail::scope_guard
m_is_cancelled	threadpool/detail/future.hpp	/^    volatile bool m_is_cancelled;$/;"	m	class:boost::threadpool::detail::future_impl
m_monitor	threadpool/detail/future.hpp	/^    mutable mutex m_monitor;$/;"	m	class:boost::threadpool::detail::future_impl
m_monitor	threadpool/detail/pool_core.hpp	/^    mutable recursive_mutex  m_monitor;$/;"	m	class:boost::threadpool::detail::pool_core
m_mutex	threadpool/detail/locking_ptr.hpp	/^    Mutex & m_mutex;              \/\/!< Mutex is used for scoped locking.$/;"	m	class:boost::threadpool::detail::locking_ptr
m_obj	threadpool/detail/locking_ptr.hpp	/^    T* m_obj;                     \/\/!< The instance pointer. $/;"	m	class:boost::threadpool::detail::locking_ptr
m_policy	threadpool/size_policies.hpp	/^    reference_wrapper<size_policy_type> m_policy;$/;"	m	class:boost::threadpool::resize_controller
m_pool	threadpool/detail/worker_thread.hpp	/^    shared_ptr<pool_type>      m_pool;     \/\/!< Pointer to the pool which created the worker.$/;"	m	class:boost::threadpool::detail::worker_thread
m_pool	threadpool/size_policies.hpp	/^    reference_wrapper<Pool volatile> m_pool;$/;"	m	class:boost::threadpool::static_size
m_pool	threadpool/size_policies.hpp	/^    shared_ptr<Pool> m_pool;                           \/\/!< to make sure that the pool is alive (the policy pointer is valid) as long as the controller exists$/;"	m	class:boost::threadpool::resize_controller
m_priority	threadpool/task_adaptors.hpp	/^    unsigned int m_priority;  \/\/!< The priority of the task's function.$/;"	m	class:boost::threadpool::prio_task_func
m_ready	threadpool/detail/future.hpp	/^    volatile bool m_ready;$/;"	m	class:boost::threadpool::detail::future_impl
m_result	threadpool/detail/future.hpp	/^    volatile future_result_type m_result;$/;"	m	class:boost::threadpool::detail::future_impl
m_scheduler	threadpool/detail/pool_core.hpp	/^    scheduler_type  m_scheduler;$/;"	m	class:boost::threadpool::detail::pool_core
m_shutdown_controller	threadpool/pool.hpp	/^    shared_ptr<void>                    m_shutdown_controller; \/\/ If the last pool holding a pointer to the core is deleted the controller shuts the pool down.$/;"	m	class:boost::threadpool::thread_pool
m_size_policy	threadpool/detail/pool_core.hpp	/^    scoped_ptr<size_policy_type> m_size_policy; \/\/ is never null$/;"	m	class:boost::threadpool::detail::pool_core
m_target_worker_count	threadpool/detail/pool_core.hpp	/^    volatile size_t m_target_worker_count;	$/;"	m	class:boost::threadpool::detail::pool_core
m_task_or_terminate_workers_event	threadpool/detail/pool_core.hpp	/^    mutable condition m_task_or_terminate_workers_event;  \/\/ Task is available OR total worker count should be reduced.$/;"	m	class:boost::threadpool::detail::pool_core
m_terminate_all_workers	threadpool/detail/pool_core.hpp	/^    bool  m_terminate_all_workers;								\/\/ Indicates if termination of all workers was triggered.$/;"	m	class:boost::threadpool::detail::pool_core
m_terminated_workers	threadpool/detail/pool_core.hpp	/^    std::vector<shared_ptr<worker_type> > m_terminated_workers; \/\/ List of workers which are terminated but not fully destructed.$/;"	m	class:boost::threadpool::detail::pool_core
m_thread	threadpool/detail/worker_thread.hpp	/^    shared_ptr<boost::thread>  m_thread;   \/\/!< Pointer to the thread which executes the run loop.$/;"	m	class:boost::threadpool::detail::worker_thread
m_worker_count	threadpool/detail/pool_core.hpp	/^    volatile size_t m_worker_count;	$/;"	m	class:boost::threadpool::detail::pool_core
m_worker_idle_or_terminated_event	threadpool/detail/pool_core.hpp	/^    mutable condition m_worker_idle_or_terminated_event;	\/\/ A worker is idle or was terminated.$/;"	m	class:boost::threadpool::detail::pool_core
main	Main.cpp	/^int main(int argc,char *argv[])$/;"	f
main	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^int main(int argc, char* argv[])$/;"	f
main	build/CMakeFiles/CompilerIdC/CMakeCCompilerId.c	/^void main() {}$/;"	f
main	build/CMakeFiles/CompilerIdCXX/CMakeCXXCompilerId.cpp	/^int main(int argc, char* argv[])$/;"	f
matchNumber_	MetaProcessor.h	/^			int matchNumber_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
matchRatio_	FilterProcessor.h	/^	float matchRatio_;  \/\/接头比对比列$/;"	m	class:PreProcessTool::FilterProcessor
match_	DGEProcessor.h	/^	float match_[5][5];$/;"	m	class:DGEProcessTool::DGEProcessor
maxQualityValue	Common.h	/^        int maxQualityValue;  \/\/记录fq文件中碱基的最大质量值.$/;"	m	struct:PreProcessTool::FqInfo
maxQualityValue	MetaCommon.h	/^	int maxQualityValue;  \/\/记录fq文件中碱基的最大质量值.$/;"	m	struct:MetaPreProcessTool::FqInfo
md5Seq_	FilterProcessor.h	/^    unsigned char md5Seq_[MD5_DIGEST_LENGTH];   \/\/存放碱基序列MD5值$/;"	m	class:PreProcessTool::FilterProcessor
memLimit_	DGEProcessor.h	/^	long memLimit_;$/;"	m	class:DGEProcessTool::DGEProcessor
memLimit_	FilterProcessor.h	/^	long memLimit_;$/;"	m	class:PreProcessTool::FilterProcessor
memLimit_	MetaProcessor.h	/^			long memLimit_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
memLimit_	SRNAProcessor.h	/^			long memLimit_;$/;"	m	class:SRNAProcessTool::RNAProcessor
mergeAndSortFilesByAscii	SRNAProcessor.cpp	/^	string RNAProcessor::mergeAndSortFilesByAscii(string &outpfx, vector<string> &files)$/;"	f	class:SRNAProcessTool::RNAProcessor
mergeAndSortFilesByAsciiTask	SRNAProcessor.cpp	/^	void  RNAProcessor::mergeAndSortFilesByAsciiTask(string inFile1, string inFile2, string outFile, int *result)$/;"	f	class:SRNAProcessTool::RNAProcessor
mergeAndSortFilesByNumber	SRNAProcessor.cpp	/^	string RNAProcessor::mergeAndSortFilesByNumber(string &outpfx, vector<string> &files)$/;"	f	class:SRNAProcessTool::RNAProcessor
mergeAndSortFilesByNumberTask	SRNAProcessor.cpp	/^	void RNAProcessor::mergeAndSortFilesByNumberTask(string inFile1, string inFile2, string outFile, int *result)$/;"	f	class:SRNAProcessTool::RNAProcessor
mergeSortedFiles	FilterProcessor.cpp	/^    void FilterProcessor::mergeSortedFiles(int num, FqInfo *info, gzFile &outFile)$/;"	f	class:PreProcessTool::FilterProcessor
mergeSortedFiles	FilterProcessor.cpp	/^    void FilterProcessor::mergeSortedFiles(int num, FqInfo *info1, FqInfo *info2, gzFile &outFile1, gzFile &outFile2)$/;"	f	class:PreProcessTool::FilterProcessor
mergeTmpFilesAndPrint	SRNACleanFA.cpp	/^	int RNAProcessor::mergeTmpFilesAndPrint(FqInfo &info)$/;"	f	class:SRNAProcessTool::RNAProcessor
minAlignLength_	MetaProcessor.h	/^			int minAlignLength_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
minInsertSize_	SRNAProcessor.h	/^			int minInsertSize_;$/;"	m	class:SRNAProcessTool::RNAProcessor
minMean_	FilterProcessor.h	/^	float minMean_;$/;"	m	class:PreProcessTool::FilterProcessor
minSize_	SRNAProcessor.h	/^			int minSize_;$/;"	m	class:SRNAProcessTool::RNAProcessor
miniAlignLength_	SRNAProcessor.h	/^			int miniAlignLength_;$/;"	m	class:SRNAProcessTool::RNAProcessor
misMatchRate_	MetaProcessor.h	/^			float misMatchRate_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
misMatch_	DGEProcessor.h	/^	int misMatch_;$/;"	m	class:DGEProcessTool::DGEProcessor
misMatch_	FilterProcessor.h	/^	int misMatch_;  \/\/接头允许错配数$/;"	m	class:PreProcessTool::FilterProcessor
misMatch_	SRNAProcessor.h	/^			int misMatch_;$/;"	m	class:SRNAProcessTool::RNAProcessor
mis_	FilterProcessor.h	/^	float mis_;$/;"	m	class:PreProcessTool::FilterProcessor
mrna_	SRNAProcessor.h	/^			bool mrna_;$/;"	m	class:SRNAProcessTool::RNAProcessor
n	DGEProcessor.h	/^	int a, c, g, t, n, ns; \/\/ns 是指第截取tag的碱基N的个数\/\/$/;"	m	struct:DGEProcessTool::StatisInfo
n	FilterProcessor.h	/^	int a, c, g, t, n;$/;"	m	struct:PreProcessTool::StatisInfo
n	MetaProcessor.h	/^		int a, c, g, t, n;$/;"	m	struct:MetaPreProcessTool::StatisInfo
n	SRNAProcessor.h	/^		int a, c, g, t, n, ns; \/\/ns 是指第1-30个碱基内的N个数\/\/$/;"	m	struct:SRNAProcessTool::StatisInfo
nBaseNumber_	MetaProcessor.h	/^			int nBaseNumber_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
nExceed	FilterProcessor.h	/^	bool nExceed;$/;"	m	struct:PreProcessTool::StatisResult
nExceed	MetaProcessor.h	/^		bool nExceed;$/;"	m	struct:MetaPreProcessTool::StatisResult
nExceedNum	Common.h	/^        unsigned long nExceedNum;  \/\/the number of read which n rate was exceed in raw data$/;"	m	struct:PreProcessTool::FqInfo
nExceedNum	MetaCommon.h	/^	unsigned long nExceedNum;  \/\/the number of read which n rate was exceed in raw data$/;"	m	struct:MetaPreProcessTool::FqInfo
nRate_	FilterProcessor.h	/^	float nRate_;$/;"	m	class:PreProcessTool::FilterProcessor
nRead_	SRNAProcessor.h	/^			int nRead_;$/;"	m	class:SRNAProcessTool::RNAProcessor
nSeed_	DGEProcessor.h	/^	int nSeed_;$/;"	m	class:DGEProcessTool::DGEProcessor
nSeed_	SRNAProcessor.h	/^			int nSeed_;$/;"	m	class:SRNAProcessTool::RNAProcessor
nSequence_	DGEProcessor.h	/^	map<string,int> nSequence_;$/;"	m	class:DGEProcessTool::DGEProcessor
name	FqFile.h	/^    std::string name;$/;"	m	class:PreProcessTool::FqFile
nameIndex1_	PeBuffer.h	/^	char **nameIndex1_;$/;"	m	class:PreProcessTool::PeBuffer
nameIndex2_	PeBuffer.h	/^	char **nameIndex2_;$/;"	m	class:PreProcessTool::PeBuffer
nextRead	FqFile.cpp	/^bool FqFile::nextRead(StrRead& read)$/;"	f	class:PreProcessTool::FqFile
nextRead	FqFile.cpp	/^bool FqFile::nextRead(StrRead& read1, StrRead& read2)$/;"	f	class:PreProcessTool::FqFile
ns	DGEProcessor.h	/^	int a, c, g, t, n, ns; \/\/ns 是指第截取tag的碱基N的个数\/\/$/;"	m	struct:DGEProcessTool::StatisInfo
ns	SRNAProcessor.h	/^		int a, c, g, t, n, ns; \/\/ns 是指第1-30个碱基内的N个数\/\/$/;"	m	struct:SRNAProcessTool::StatisInfo
number_	DGEProcessor.h	/^	unsigned long number_;$/;"	m	class:DGEProcessTool::DGEProcessor
onlyStat_	FilterProcessor.h	/^	bool onlyStat_;$/;"	m	class:PreProcessTool::FilterProcessor
onlyStat_	SRNAProcessor.h	/^			bool onlyStat_;$/;"	m	class:SRNAProcessTool::RNAProcessor
open	FqFile.h	/^    bool open(std::string filename)$/;"	f	class:PreProcessTool::FqFile
operator ()	Common.h	/^        bool operator()(const ReadSeq &a, const ReadSeq &b)$/;"	f	struct:PreProcessTool::Compare
operator ()	MetaCommon.h	/^    bool operator()(const ReadSeq &a, const ReadSeq &b)$/;"	f	struct:MetaPreProcessTool::Compare
operator ()	threadpool/detail/future.hpp	/^  result_type operator()() const volatile$/;"	f	class:boost::threadpool::detail::future_impl
operator ()	threadpool/detail/future.hpp	/^  void operator()()$/;"	f	class:boost::threadpool::detail::future_impl_task_func
operator ()	threadpool/future.hpp	/^   result_type operator()() \/\/ throw( thread::cancelation_exception, ... )$/;"	f	class:boost::threadpool::future
operator ()	threadpool/task_adaptors.hpp	/^    void operator() (void) const$/;"	f	class:boost::threadpool::looped_task_func
operator ()	threadpool/task_adaptors.hpp	/^    void operator() (void) const$/;"	f	class:boost::threadpool::prio_task_func
operator *	threadpool/detail/locking_ptr.hpp	/^    T& operator*() const$/;"	f	class:boost::threadpool::detail::locking_ptr
operator ->	threadpool/detail/locking_ptr.hpp	/^    T* operator->() const$/;"	f	class:boost::threadpool::detail::locking_ptr
operator <	threadpool/task_adaptors.hpp	/^    bool operator< (const prio_task_func& rhs) const$/;"	f	class:boost::threadpool::prio_task_func
optionalName	Common.h	/^        char *optionalName;$/;"	m	struct:PreProcessTool::__anon1
optionalName	Common.h	/^        std::string optionalName;$/;"	m	struct:PreProcessTool::__anon2
optionalName	MetaCommon.h	/^	char *optionalName;$/;"	m	struct:MetaPreProcessTool::__anon3
outCleanFileS_	MetaProcessor.h	/^			gzFile outCleanFileS_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
outCleanPfx_	MetaProcessor.h	/^			string outCleanPfx_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
outDir_	DGEProcessor.h	/^	string outDir_;$/;"	m	class:DGEProcessTool::DGEProcessor
outDir_	FilterProcessor.h	/^	string outDir_;  \/\/all output file's output path$/;"	m	class:PreProcessTool::FilterProcessor
outDir_	MetaProcessor.h	/^			string outDir_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
outDir_	SRNAProcessor.h	/^			string outDir_;$/;"	m	class:SRNAProcessTool::RNAProcessor
outFqName_	SRNAProcessor.h	/^			string outFqName_;$/;"	m	class:SRNAProcessTool::RNAProcessor
outPfx_	DGEProcessor.h	/^	string outPfx_;$/;"	m	class:DGEProcessTool::DGEProcessor
outPfx_	SRNAProcessor.h	/^			string outPfx_;$/;"	m	class:SRNAProcessTool::RNAProcessor
outRawPfx_	MetaProcessor.h	/^			string outRawPfx_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
outfq_	DGEProcessor.h	/^	bool outfq_;$/;"	m	class:DGEProcessTool::DGEProcessor
outfq_	SRNAProcessor.h	/^			bool outfq_;$/;"	m	class:SRNAProcessTool::RNAProcessor
output	DGEProcessor.cpp	/^	void DGEProcessor::output(FqInfo *info1, FqInfo *info2)$/;"	f	class:DGEProcessTool::DGEProcessor
output	SRNAProcessor.cpp	/^	void RNAProcessor::output(FqInfo *info1, FqInfo *info2)$/;"	f	class:SRNAProcessTool::RNAProcessor
outputCleanData	FilterProcessor.cpp	/^    void FilterProcessor::outputCleanData(gzFile &file, const StrRead &read)$/;"	f	class:PreProcessTool::FilterProcessor
outputCleanDataTask	FilterProcessor.cpp	/^    void FilterProcessor::outputCleanDataTask(gzFile &file, Read *reads)$/;"	f	class:PreProcessTool::FilterProcessor
outputCleanDataTask	MetaProcessor.cpp	/^	void MetaProcessor::outputCleanDataTask(gzFile &file, PreProcessTool::Read *reads)$/;"	f	class:MetaPreProcessTool::MetaProcessor
outputCleanDataTaskNew	MetaProcessor.cpp	/^	void MetaProcessor::outputCleanDataTaskNew(gzFile &file, PreProcessTool::Read *reads, int size, int *result, int type)$/;"	f	class:MetaPreProcessTool::MetaProcessor
outputRawDataTask	FilterProcessor.cpp	/^    void FilterProcessor::outputRawDataTask(gzFile &file,Read *reads, unsigned int size)$/;"	f	class:PreProcessTool::FilterProcessor
outputRawDataTask	MetaProcessor.cpp	/^	void MetaProcessor::outputRawDataTask(gzFile &file,PreProcessTool::Read *reads, unsigned int size)$/;"	f	class:MetaPreProcessTool::MetaProcessor
outputSingleDataTask	MetaProcessor.cpp	/^	void MetaProcessor::outputSingleDataTask(gzFile &file, PreProcessTool::Read *reads1, PreProcessTool::Read *reads2, int size, int *result)$/;"	f	class:MetaPreProcessTool::MetaProcessor
outputTempData	FilterProcessor.cpp	/^    void FilterProcessor::outputTempData(ofstream& file, Read* reads)$/;"	f	class:PreProcessTool::FilterProcessor
outputTempData	FilterProcessor.cpp	/^    void FilterProcessor::outputTempData(ofstream& file, Read* reads1, Read* reads2)$/;"	f	class:PreProcessTool::FilterProcessor
overlap_	FilterProcessor.h	/^	int overlap_;$/;"	m	class:PreProcessTool::FilterProcessor
pending	threadpool/detail/pool_core.hpp	/^    size_t pending() const volatile$/;"	f	class:boost::threadpool::detail::pool_core
pending	threadpool/pool.hpp	/^    size_t pending() const$/;"	f	class:boost::threadpool::thread_pool
pl_	MetaProcessor.h	/^			boost::threadpool::pool pl_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
pl_	SRNAProcessor.h	/^			pool pl_;$/;"	m	class:SRNAProcessTool::RNAProcessor
polyANum	Common.h	/^        unsigned long polyANum;    \/\/polyA number in raw data$/;"	m	struct:PreProcessTool::FqInfo
polyA_	FilterProcessor.h	/^	float polyA_;$/;"	m	class:PreProcessTool::FilterProcessor
polyNNum	MetaCommon.h	/^	unsigned long polyNNum;    \/\/polyA number in raw data$/;"	m	struct:MetaPreProcessTool::FqInfo
polyN_	MetaProcessor.h	/^			float polyN_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
pool	threadpool/pool.hpp	/^  typedef fifo_pool pool;$/;"	t	namespace:boost::threadpool
pool_core	threadpool/detail/pool_core.hpp	/^    pool_core()$/;"	f	class:boost::threadpool::detail::pool_core
pool_core	threadpool/detail/pool_core.hpp	/^  class pool_core$/;"	c	namespace:boost::threadpool::detail
pool_core_type	threadpool/pool.hpp	/^                              ShutdownPolicy> pool_core_type;$/;"	t	class:boost::threadpool::thread_pool
pool_type	threadpool/detail/pool_core.hpp	/^                      ShutdownPolicy > pool_type;           \/\/!< Indicates the thread pool's type.$/;"	t	class:boost::threadpool::detail::pool_core
pool_type	threadpool/detail/worker_thread.hpp	/^    typedef Pool pool_type;         	   \/\/!< Indicates the pool's type.$/;"	t	class:boost::threadpool::detail::worker_thread
pop	threadpool/scheduling_policies.hpp	/^    void pop()$/;"	f	class:boost::threadpool::fifo_scheduler
pop	threadpool/scheduling_policies.hpp	/^    void pop()$/;"	f	class:boost::threadpool::lifo_scheduler
pop	threadpool/scheduling_policies.hpp	/^    void pop()$/;"	f	class:boost::threadpool::prio_scheduler
printFiles	SRNACleanFA.cpp	/^	int RNAProcessor::printFiles(string &numberTmpFile, FqInfo &globleInfo, long length1)$/;"	f	class:SRNAProcessTool::RNAProcessor
printFqInfo	Common.cpp	/^	void printFqInfo(const string outDir, const string prefix, const FqInfo *fqInfo1, const FqInfo *fqInfo2)$/;"	f	namespace:PreProcessTool
printFqInfo	DGECommon.cpp	/^void printFqInfo(const string outDir, FqInfo &fqInfo)$/;"	f	namespace:DGEProcessTool
printFqInfo	MetaCommon.cpp	/^	void printFqInfo(const string outDir, const string prefix, const FqInfo *fqInfo1, const FqInfo *fqInfo2)$/;"	f	namespace:MetaPreProcessTool
printFqInfo	SRNACommon.cpp	/^void printFqInfo(const string outDir, FqInfo &fqInfo)$/;"	f	namespace:SRNAProcessTool
printMetaStats	MetaProcessor.cpp	/^	int MetaProcessor::printMetaStats(FqInfo &info1, FqInfo &info2)$/;"	f	class:MetaPreProcessTool::MetaProcessor
printSingleMutex_	MetaProcessor.h	/^			boost::mutex printSingleMutex_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
printUsage	DGEProcessor.cpp	/^	void DGEProcessor::printUsage()$/;"	f	class:DGEProcessTool::DGEProcessor
printUsage	FilterProcessor.cpp	/^    void FilterProcessor::printUsage()$/;"	f	class:PreProcessTool::FilterProcessor
printUsage	MetaProcessor.cpp	/^	void MetaProcessor::printUsage()$/;"	f	class:MetaPreProcessTool::MetaProcessor
printUsage	SRNAProcessor.cpp	/^	void RNAProcessor::printUsage()$/;"	f	class:SRNAProcessTool::RNAProcessor
printVersion	DGEProcessor.cpp	/^	void DGEProcessor::printVersion()$/;"	f	class:DGEProcessTool::DGEProcessor
printVersion	FilterProcessor.cpp	/^    void FilterProcessor::printVersion()$/;"	f	class:PreProcessTool::FilterProcessor
printVersion	MetaProcessor.cpp	/^	void MetaProcessor::printVersion()$/;"	f	class:MetaPreProcessTool::MetaProcessor
printVersion	SRNAProcessor.cpp	/^	void RNAProcessor::printVersion()$/;"	f	class:SRNAProcessTool::RNAProcessor
prio_pool	threadpool/pool.hpp	/^  typedef thread_pool<prio_task_func, prio_scheduler, static_size, resize_controller, wait_for_all_tasks> prio_pool;$/;"	t	namespace:boost::threadpool
prio_scheduler	threadpool/scheduling_policies.hpp	/^  class prio_scheduler$/;"	c	namespace:boost::threadpool
prio_task_func	threadpool/task_adaptors.hpp	/^    prio_task_func(unsigned int const priority, task_func const & function)$/;"	f	class:boost::threadpool::prio_task_func
prio_task_func	threadpool/task_adaptors.hpp	/^  class prio_task_func$/;"	c	namespace:boost::threadpool
processDGE	DGEProcessor.cpp	/^	int DGEProcessor::processDGE()$/;"	f	class:DGEProcessTool::DGEProcessor
processFA	SRNACleanFA.cpp	/^	int RNAProcessor::processFA()$/;"	f	class:SRNAProcessTool::RNAProcessor
processFQ	SRNACleanFQ.cpp	/^int RNAProcessor::processFQ()$/;"	f	class:SRNAProcessTool::RNAProcessor
processParams	DGEProcessor.cpp	/^	int DGEProcessor::processParams(int argc, char **argv)$/;"	f	class:DGEProcessTool::DGEProcessor
processParams	FilterProcessor.cpp	/^    int FilterProcessor::processParams(int argc, char **argv)$/;"	f	class:PreProcessTool::FilterProcessor
processParams	MetaProcessor.cpp	/^	int MetaProcessor::processParams(int argc, char** argv)$/;"	f	class:MetaPreProcessTool::MetaProcessor
processParams	SRNAProcessor.cpp	/^	int RNAProcessor::processParams(int argc, char **argv)$/;"	f	class:SRNAProcessTool::RNAProcessor
processRNA	DGEProcessor.cpp	/^	int DGEProcessor::processRNA(int argc, char **argv)$/;"	f	class:DGEProcessTool::DGEProcessor
processRNA	SRNAProcessor.cpp	/^	int RNAProcessor::processRNA(int argc, char **argv)$/;"	f	class:SRNAProcessTool::RNAProcessor
push	threadpool/scheduling_policies.hpp	/^    bool push(task_type const & task)$/;"	f	class:boost::threadpool::fifo_scheduler
push	threadpool/scheduling_policies.hpp	/^    bool push(task_type const & task)$/;"	f	class:boost::threadpool::lifo_scheduler
push	threadpool/scheduling_policies.hpp	/^    bool push(task_type const & task)$/;"	f	class:boost::threadpool::prio_scheduler
q20	DGEProcessor.h	/^	int q20, q30;$/;"	m	struct:DGEProcessTool::StatisInfo
q20	FilterProcessor.h	/^	int q20, q30;$/;"	m	struct:PreProcessTool::StatisInfo
q20	MetaProcessor.h	/^		int q20, q30;$/;"	m	struct:MetaPreProcessTool::StatisInfo
q20	SRNAProcessor.h	/^		int q20, q30, lowQual1,lowQual2;\/\/lowQual1是1-30碱基q<10的个数, lowQual2是1-30碱基q<13的个数.\/\/$/;"	m	struct:SRNAProcessTool::StatisInfo
q20q30	Common.h	/^        unsigned long q20q30[MAX_LENGTH][2];  \/\/Q20 Q30$/;"	m	struct:PreProcessTool::FqInfo
q20q30	DGECommon.h	/^	unsigned long q20q30[MAX_LENGTH][2]; \/\/Q20和Q30$/;"	m	struct:DGEProcessTool::FqInfo
q20q30	MetaCommon.h	/^	unsigned long q20q30[MAX_LENGTH][2];  \/\/Q20 Q30$/;"	m	struct:MetaPreProcessTool::FqInfo
q20q30	SRNACommon.h	/^	unsigned long q20q30[MAX_LENGTH][2]; \/\/Q20和Q30$/;"	m	struct:SRNAProcessTool::FqInfo
q30	DGEProcessor.h	/^	int q20, q30;$/;"	m	struct:DGEProcessTool::StatisInfo
q30	FilterProcessor.h	/^	int q20, q30;$/;"	m	struct:PreProcessTool::StatisInfo
q30	MetaProcessor.h	/^		int q20, q30;$/;"	m	struct:MetaPreProcessTool::StatisInfo
q30	SRNAProcessor.h	/^		int q20, q30, lowQual1,lowQual2;\/\/lowQual1是1-30碱基q<10的个数, lowQual2是1-30碱基q<13的个数.\/\/$/;"	m	struct:SRNAProcessTool::StatisInfo
qual	Common.h	/^        unsigned long qual[MAX_LENGTH][MAX_QUALITY + 1];$/;"	m	struct:PreProcessTool::FqInfo
qual	DGECommon.h	/^	unsigned long qual[MAX_LENGTH][MAX_QUALITY]; \/\/2-41$/;"	m	struct:DGEProcessTool::FqInfo
qual	MetaCommon.h	/^	unsigned long qual[MAX_LENGTH][MAX_QUALITY + 1];$/;"	m	struct:MetaPreProcessTool::FqInfo
qual	SRNACommon.h	/^	unsigned long qual[MAX_LENGTH][MAX_QUALITY]; \/\/2-41$/;"	m	struct:SRNAProcessTool::FqInfo
qualRate_	FilterProcessor.h	/^	float qualRate_;$/;"	m	class:PreProcessTool::FilterProcessor
qualSys_	FilterProcessor.h	/^	QualitySystem qualSys_;  \/\/the fq file's quality system$/;"	m	class:PreProcessTool::FilterProcessor
qualSys_	MetaProcessor.h	/^			QualitySystem qualSys_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
qualSystem_	DGEProcessor.h	/^	QualitySystem qualSystem_;$/;"	m	class:DGEProcessTool::DGEProcessor
qualSystem_	SRNAProcessor.h	/^			QualitySystem qualSystem_;$/;"	m	class:SRNAProcessTool::RNAProcessor
qualityThreshold_	MetaProcessor.h	/^			int qualityThreshold_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
rawBaseA	Common.h	/^        unsigned long rawBaseA;     \/\/raw data base A number$/;"	m	struct:PreProcessTool::FqInfo
rawBaseA	DGECommon.h	/^	unsigned long rawBaseA; \/\/rawfq文件所有read中碱基A的总数$/;"	m	struct:DGEProcessTool::FqInfo
rawBaseA	MetaCommon.h	/^	unsigned long rawBaseA;     \/\/raw data base A number$/;"	m	struct:MetaPreProcessTool::FqInfo
rawBaseA	SRNACommon.h	/^	unsigned long rawBaseA; \/\/rawfq文件所有read中碱基A的总数$/;"	m	struct:SRNAProcessTool::FqInfo
rawBaseC	Common.h	/^        unsigned long rawBaseC;     \/\/raw data base C number$/;"	m	struct:PreProcessTool::FqInfo
rawBaseC	DGECommon.h	/^	unsigned long rawBaseC; \/\/rawfq文件所有read中碱基C的总数$/;"	m	struct:DGEProcessTool::FqInfo
rawBaseC	MetaCommon.h	/^	unsigned long rawBaseC;     \/\/raw data base C number$/;"	m	struct:MetaPreProcessTool::FqInfo
rawBaseC	SRNACommon.h	/^	unsigned long rawBaseC; \/\/rawfq文件所有read中碱基C的总数$/;"	m	struct:SRNAProcessTool::FqInfo
rawBaseG	Common.h	/^        unsigned long rawBaseG; \/\/raw data base G number$/;"	m	struct:PreProcessTool::FqInfo
rawBaseG	DGECommon.h	/^	unsigned long rawBaseG; \/\/rawfq文件所有read中碱基G的总数$/;"	m	struct:DGEProcessTool::FqInfo
rawBaseG	MetaCommon.h	/^	unsigned long rawBaseG; \/\/raw data base G number$/;"	m	struct:MetaPreProcessTool::FqInfo
rawBaseG	SRNACommon.h	/^	unsigned long rawBaseG; \/\/rawfq文件所有read中碱基G的总数$/;"	m	struct:SRNAProcessTool::FqInfo
rawBaseN	Common.h	/^        unsigned long rawBaseN; \/\/raw data base N number$/;"	m	struct:PreProcessTool::FqInfo
rawBaseN	DGECommon.h	/^	unsigned long rawBaseN; \/\/rawfq文件所有read中碱基为N的总数$/;"	m	struct:DGEProcessTool::FqInfo
rawBaseN	MetaCommon.h	/^	unsigned long rawBaseN; \/\/raw data base N number$/;"	m	struct:MetaPreProcessTool::FqInfo
rawBaseN	SRNACommon.h	/^	unsigned long rawBaseN; \/\/rawfq文件所有read中碱基为N的总数$/;"	m	struct:SRNAProcessTool::FqInfo
rawBaseT	Common.h	/^        unsigned long rawBaseT; \/\/raw data base T number$/;"	m	struct:PreProcessTool::FqInfo
rawBaseT	DGECommon.h	/^	unsigned long rawBaseT; \/\/rawfq文件所有read中碱基T的总数$/;"	m	struct:DGEProcessTool::FqInfo
rawBaseT	MetaCommon.h	/^	unsigned long rawBaseT; \/\/raw data base T number$/;"	m	struct:MetaPreProcessTool::FqInfo
rawBaseT	SRNACommon.h	/^	unsigned long rawBaseT; \/\/rawfq文件所有read中碱基T的总数$/;"	m	struct:SRNAProcessTool::FqInfo
rawFq1_	FilterProcessor.h	/^	string rawFq1_;$/;"	m	class:PreProcessTool::FilterProcessor
rawFq2_	FilterProcessor.h	/^	string rawFq2_;$/;"	m	class:PreProcessTool::FilterProcessor
rawQ20	Common.h	/^        unsigned long rawQ20; \/\/rawfq文件中碱基质量>=20的碱基总数$/;"	m	struct:PreProcessTool::FqInfo
rawQ20	DGECommon.h	/^	unsigned long rawQ20; \/\/rawfq文件中碱基质量>=20的碱基总数$/;"	m	struct:DGEProcessTool::FqInfo
rawQ20	MetaCommon.h	/^	unsigned long rawQ20; \/\/rawfq文件中碱基质量>=20的碱基总数$/;"	m	struct:MetaPreProcessTool::FqInfo
rawQ20	SRNACommon.h	/^	unsigned long rawQ20; \/\/rawfq文件中碱基质量>=20的碱基总数$/;"	m	struct:SRNAProcessTool::FqInfo
rawQ30	Common.h	/^        unsigned long rawQ30; \/\/rawfq文件中碱基质量>=30的碱基总数$/;"	m	struct:PreProcessTool::FqInfo
rawQ30	DGECommon.h	/^	unsigned long rawQ30; \/\/rawfq文件中碱基质量>=30的碱基总数$/;"	m	struct:DGEProcessTool::FqInfo
rawQ30	MetaCommon.h	/^	unsigned long rawQ30; \/\/rawfq文件中碱基质量>=30的碱基总数$/;"	m	struct:MetaPreProcessTool::FqInfo
rawQ30	SRNACommon.h	/^	unsigned long rawQ30; \/\/rawfq文件中碱基质量>=30的碱基总数$/;"	m	struct:SRNAProcessTool::FqInfo
rawReadLength	Common.h	/^        unsigned int rawReadLength;     \/\/raw data 读长$/;"	m	struct:PreProcessTool::FqInfo
rawReadLength	MetaCommon.h	/^	unsigned int rawReadLength;     \/\/raw data 读长$/;"	m	struct:MetaPreProcessTool::FqInfo
rawSequence_	SRNAProcessor.h	/^			map<string,int> rawSequence_;$/;"	m	class:SRNAProcessTool::RNAProcessor
rawTotalBaseNum	Common.h	/^        unsigned long rawTotalBaseNum;  \/\/raw data total base number$/;"	m	struct:PreProcessTool::FqInfo
rawTotalBaseNum	MetaCommon.h	/^	unsigned long rawTotalBaseNum;  \/\/raw data total base number$/;"	m	struct:MetaPreProcessTool::FqInfo
rawTotalBases	DGECommon.h	/^	unsigned long rawTotalBases; \/\/rawfq文件的碱基总数$/;"	m	struct:DGEProcessTool::FqInfo
rawTotalBases	SRNACommon.h	/^	unsigned long rawTotalBases; \/\/rawfq文件的碱基总数$/;"	m	struct:SRNAProcessTool::FqInfo
rawTotalReadNum	Common.h	/^        unsigned long rawTotalReadNum;  \/\/raw data read个数$/;"	m	struct:PreProcessTool::FqInfo
rawTotalReadNum	MetaCommon.h	/^	unsigned long rawTotalReadNum;  \/\/raw data read个数$/;"	m	struct:MetaPreProcessTool::FqInfo
rawTotalReads	DGECommon.h	/^	unsigned long rawTotalReads; \/\/rawfq文件的read总数$/;"	m	struct:DGEProcessTool::FqInfo
rawTotalReads	SRNACommon.h	/^	unsigned long rawTotalReads; \/\/rawfq文件的read总数$/;"	m	struct:SRNAProcessTool::FqInfo
readLen	FilterProcessor.h	/^	int readLen;$/;"	m	struct:PreProcessTool::StatisInfo
readLen	MetaProcessor.h	/^		int readLen;$/;"	m	struct:MetaPreProcessTool::StatisInfo
readLen2_	FilterProcessor.h	/^	int readLen2_;   \/\/read length in fq2 file$/;"	m	class:PreProcessTool::FilterProcessor
readLen_	DGEProcessor.h	/^	int readLen_;$/;"	m	class:DGEProcessTool::DGEProcessor
readLen_	FilterProcessor.h	/^	int readLen_;    \/\/read length in fq1 file$/;"	m	class:PreProcessTool::FilterProcessor
readLen_	SRNAProcessor.h	/^			int readLen_;$/;"	m	class:SRNAProcessTool::RNAProcessor
readName	Common.h	/^        char *readName;$/;"	m	struct:PreProcessTool::__anon1
readName	Common.h	/^        std::string readName;$/;"	m	struct:PreProcessTool::__anon2
readName	Common.h	/^        uint64_t *readName;$/;"	m	struct:PreProcessTool::ReadSeq
readName	MetaCommon.h	/^	char *readName;$/;"	m	struct:MetaPreProcessTool::__anon3
readName	MetaCommon.h	/^	uint64_t *readName;$/;"	m	struct:MetaPreProcessTool::ReadSeq
readSize_	FqBuffer.h	/^	int readSize_;$/;"	m	class:PreProcessTool::FqBuffer
readSize_	PeBuffer.h	/^	int readSize_;$/;"	m	class:PreProcessTool::PeBuffer
readTask	PeBuffer.cpp	/^	void PeBuffer::readTask(int file, int &result)$/;"	f	class:PreProcessTool::PeBuffer
readWithPolyA	DGECommon.h	/^	unsigned long readWithPolyA; \/\/带PolyA的read的总数$/;"	m	struct:DGEProcessTool::FqInfo
readWithPolyA	SRNACommon.h	/^	unsigned long readWithPolyA; \/\/带PolyA的read的总数$/;"	m	struct:SRNAProcessTool::FqInfo
readWithShortValidLength	DGECommon.h	/^	unsigned long readWithShortValidLength; \/\/去掉两端接头后，长度小于18的read的总数$/;"	m	struct:DGEProcessTool::FqInfo
readWithShortValidLength	SRNACommon.h	/^	unsigned long readWithShortValidLength; \/\/去掉两端接头后，长度小于18的read的总数$/;"	m	struct:SRNAProcessTool::FqInfo
reads1	DGEProcessor.h	/^	PreProcessTool::Read *reads1;$/;"	m	struct:DGEProcessTool::TaskParam
reads1	FilterProcessor.h	/^	Read *reads1;$/;"	m	struct:PreProcessTool::TaskParam
reads1	MetaProcessor.h	/^		PreProcessTool::Read *reads1;$/;"	m	struct:MetaPreProcessTool::TaskParam
reads1	SRNAProcessor.h	/^		PreProcessTool::Read *reads1;$/;"	m	struct:SRNAProcessTool::TaskParam
reads1_	PeBuffer.h	/^	Read *reads1_;$/;"	m	class:PreProcessTool::PeBuffer
reads2	FilterProcessor.h	/^	Read *reads2;$/;"	m	struct:PreProcessTool::TaskParam
reads2	MetaProcessor.h	/^		PreProcessTool::Read *reads2;$/;"	m	struct:MetaPreProcessTool::TaskParam
reads2_	PeBuffer.h	/^	Read *reads2_;$/;"	m	class:PreProcessTool::PeBuffer
readsName1_	FilterProcessor.h	/^	set<string> readsName1_;   \/\/store the read's name which in adapter list file$/;"	m	class:PreProcessTool::FilterProcessor
readsName1_	MetaProcessor.h	/^			set<string> readsName1_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
readsName2_	FilterProcessor.h	/^	set<string> readsName2_;$/;"	m	class:PreProcessTool::FilterProcessor
readsName2_	MetaProcessor.h	/^			set<string> readsName2_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
readsWithAdapter	DGECommon.h	/^	unsigned long readsWithAdapter; \/\/rawfq文件中带有adapter的read的总数$/;"	m	struct:DGEProcessTool::FqInfo
readsWithAdapter	SRNACommon.h	/^	unsigned long readsWithAdapter; \/\/rawfq文件中带有adapter的read的总数$/;"	m	struct:SRNAProcessTool::FqInfo
readsWithLowQual	DGECommon.h	/^	unsigned long readsWithLowQual;\/\/rawfq文件中read中低质量值碱基比例大于阀值的\/\/read的总数$/;"	m	struct:DGEProcessTool::FqInfo
readsWithLowQual	SRNACommon.h	/^	unsigned long readsWithLowQual;\/\/rawfq文件中read中低质量值碱基比例大于阀值的\/\/read的总数$/;"	m	struct:SRNAProcessTool::FqInfo
readsWithNrate	DGECommon.h	/^	unsigned long readsWithNrate; \/\/rawfq文件中N值比例超过阀值的read的总数$/;"	m	struct:DGEProcessTool::FqInfo
readsWithNrate	SRNACommon.h	/^	unsigned long readsWithNrate; \/\/rawfq文件中N值比例超过阀值的read的总数$/;"	m	struct:SRNAProcessTool::FqInfo
reads_	FqBuffer.h	/^	Read *reads_;$/;"	m	class:PreProcessTool::FqBuffer
readslength	DGECommon.h	/^	unsigned int readslength; \/\/rawfq文件的read长度最大值（一般测序长度都一样）$/;"	m	struct:DGEProcessTool::FqInfo
readslength	SRNACommon.h	/^	unsigned int readslength; \/\/rawfq文件的read长度最大值（一般测序长度都一样）$/;"	m	struct:SRNAProcessTool::FqInfo
ready	threadpool/detail/future.hpp	/^  bool ready() const volatile$/;"	f	class:boost::threadpool::detail::future_impl
ready	threadpool/future.hpp	/^  bool ready() const$/;"	f	class:boost::threadpool::future
realReadSize_	FqBuffer.h	/^	int realReadSize_;$/;"	m	class:PreProcessTool::FqBuffer
realReadSize_	PeBuffer.h	/^	int realReadSize_;$/;"	m	class:PreProcessTool::PeBuffer
removeBad_	SRNAProcessor.h	/^			bool removeBad_;$/;"	m	class:SRNAProcessTool::RNAProcessor
removeIndex_	MetaProcessor.h	/^			bool removeIndex_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
resize	threadpool/detail/pool_core.hpp	/^    bool resize(size_t const worker_count) volatile$/;"	f	class:boost::threadpool::detail::pool_core
resize	threadpool/size_policies.hpp	/^    bool resize(size_t const worker_count)$/;"	f	class:boost::threadpool::static_size
resize	threadpool/size_policies.hpp	/^    bool resize(size_t worker_count)$/;"	f	class:boost::threadpool::resize_controller
resize_controller	threadpool/size_policies.hpp	/^    resize_controller(size_policy_type& policy, shared_ptr<Pool> pool)$/;"	f	class:boost::threadpool::resize_controller
resize_controller	threadpool/size_policies.hpp	/^  class resize_controller$/;"	c	namespace:boost::threadpool
result	DGEProcessor.h	/^	int *result;$/;"	m	struct:DGEProcessTool::TaskParam
result	SRNAProcessor.h	/^		int *result;$/;"	m	struct:SRNAProcessTool::TaskParam
result_type	threadpool/detail/future.hpp	/^  typedef Result const & result_type; \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::detail::future_impl
result_type	threadpool/detail/future.hpp	/^  typedef void result_type;                         \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::detail::future_impl_task_func
result_type	threadpool/future.hpp	/^    typedef Result const & result_type; \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::future
result_type	threadpool/task_adaptors.hpp	/^    typedef void result_type; \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::looped_task_func
result_type	threadpool/task_adaptors.hpp	/^    typedef void result_type; \/\/!< Indicates the functor's result type.$/;"	t	class:boost::threadpool::prio_task_func
reverseComplementary	Common.cpp	/^	string reverseComplementary(string &seq)$/;"	f	namespace:PreProcessTool
reverseComplementary	MetaCommon.cpp	/^	string reverseComplementary(string &seq)$/;"	f	namespace:MetaPreProcessTool
right	DGEProcessor.h	/^	int left, right;$/;"	m	struct:DGEProcessTool::TaskParam
right	FilterProcessor.h	/^	int left, right;$/;"	m	struct:PreProcessTool::TaskParam
right	MetaProcessor.h	/^		int left, right;$/;"	m	struct:MetaPreProcessTool::TaskParam
right	SRNAProcessor.h	/^		int left, right;$/;"	m	struct:SRNAProcessTool::TaskParam
rmdup_	FilterProcessor.h	/^	bool rmdup_;     \/\/indicate whether remove duplication or not$/;"	m	class:PreProcessTool::FilterProcessor
run	threadpool/detail/worker_thread.hpp	/^	  void run()$/;"	f	class:boost::threadpool::detail::worker_thread
sapaceIndex	FqFile.cpp	/^int FqFile::sapaceIndex(const string& str)$/;"	f	class:PreProcessTool::FqFile
schedule	threadpool/detail/pool_core.hpp	/^    bool schedule(task_type const & task) volatile$/;"	f	class:boost::threadpool::detail::pool_core
schedule	threadpool/future.hpp	/^schedule(Pool& pool, const Function& task)$/;"	f	namespace:boost::threadpool
schedule	threadpool/pool.hpp	/^     bool schedule(task_type const & task)$/;"	f	class:boost::threadpool::thread_pool
schedule	threadpool/pool_adaptors.hpp	/^    bool schedule(Pool& pool, shared_ptr<Runnable> const & obj)$/;"	f	namespace:boost::threadpool
schedule	threadpool/pool_adaptors.hpp	/^    schedule(Pool& pool, typename Pool::task_type const & task)$/;"	f	namespace:boost::threadpool
schedule	threadpool/pool_adaptors.hpp	/^    schedule(shared_ptr<Pool> const pool, typename Pool::task_type const & task)$/;"	f	namespace:boost::threadpool
scheduler_type	threadpool/detail/pool_core.hpp	/^    typedef SchedulingPolicy<task_type> scheduler_type;     \/\/!< Indicates the scheduler's type.$/;"	t	class:boost::threadpool::detail::pool_core
scheduler_type	threadpool/pool.hpp	/^    typedef SchedulingPolicy<task_type> scheduler_type;       \/\/!< Indicates the scheduler's type.$/;"	t	class:boost::threadpool::thread_pool
scope_guard	threadpool/detail/scope_guard.hpp	/^	scope_guard(function0<void> const & call_on_exit)$/;"	f	class:boost::threadpool::detail::scope_guard
scope_guard	threadpool/detail/scope_guard.hpp	/^class scope_guard$/;"	c	namespace:boost::threadpool::detail
score_	DGEProcessor.h	/^	int score_;$/;"	m	class:DGEProcessTool::DGEProcessor
score_	SRNAProcessor.h	/^			int score_;$/;"	m	class:SRNAProcessTool::RNAProcessor
seedLength_	SRNAProcessor.h	/^			int seedLength_;$/;"	m	class:SRNAProcessTool::RNAProcessor
set_execution_status	threadpool/detail/future.hpp	/^   void set_execution_status(bool executing) volatile$/;"	f	class:boost::threadpool::detail::future_impl
set_value	threadpool/detail/future.hpp	/^  void set_value(future_result_type const & r) volatile$/;"	f	class:boost::threadpool::detail::future_impl
shortSequence_	SRNAProcessor.h	/^			map<string,int> shortSequence_;$/;"	m	class:SRNAProcessTool::RNAProcessor
shutdown	threadpool/detail/pool_core.hpp	/^    void shutdown()$/;"	f	class:boost::threadpool::detail::pool_core
shutdown	threadpool/shutdown_policies.hpp	/^    static void shutdown(Pool& pool)$/;"	f	class:boost::threadpool::immediately
shutdown	threadpool/shutdown_policies.hpp	/^    static void shutdown(Pool& pool)$/;"	f	class:boost::threadpool::wait_for_active_tasks
shutdown	threadpool/shutdown_policies.hpp	/^    static void shutdown(Pool& pool)$/;"	f	class:boost::threadpool::wait_for_all_tasks
shutdown_policy_type	threadpool/detail/pool_core.hpp	/^    typedef ShutdownPolicy<pool_type> shutdown_policy_type;\/\/!< Indicates the shutdown policy's type.  $/;"	t	class:boost::threadpool::detail::pool_core
singleBaseNum	MetaCommon.h	/^	unsigned long singleBaseNum;$/;"	m	struct:MetaPreProcessTool::FqInfo
singleReadNum	MetaCommon.h	/^	unsigned long singleReadNum;$/;"	m	struct:MetaPreProcessTool::FqInfo
singleResult_	MetaProcessor.h	/^			int *singleResult_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
site_	DGEProcessor.h	/^	string site_;$/;"	m	class:DGEProcessTool::DGEProcessor
size	Common.h	/^        int size;$/;"	m	struct:PreProcessTool::ReadSeq
size	MetaCommon.h	/^	int size;$/;"	m	struct:MetaPreProcessTool::ReadSeq
size	threadpool/detail/pool_core.hpp	/^    size_t size()	const volatile$/;"	f	class:boost::threadpool::detail::pool_core
size	threadpool/pool.hpp	/^    size_t size()	const$/;"	f	class:boost::threadpool::thread_pool
size	threadpool/scheduling_policies.hpp	/^    size_t size() const$/;"	f	class:boost::threadpool::fifo_scheduler
size	threadpool/scheduling_policies.hpp	/^    size_t size() const$/;"	f	class:boost::threadpool::lifo_scheduler
size	threadpool/scheduling_policies.hpp	/^    size_t size() const$/;"	f	class:boost::threadpool::prio_scheduler
size1_	PeBuffer.h	/^	int size1_;$/;"	m	class:PreProcessTool::PeBuffer
size2_	PeBuffer.h	/^	int size2_;$/;"	m	class:PreProcessTool::PeBuffer
sizeMutex_	FilterProcessor.h	/^	boost::mutex sizeMutex_;$/;"	m	class:PreProcessTool::FilterProcessor
sizeMutex_	MetaProcessor.h	/^			boost::mutex sizeMutex_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
size_	FilterProcessor.h	/^	boost::uint32_t size_;   \/\/cleanDataIndexs_里面的元素个数$/;"	m	class:PreProcessTool::FilterProcessor
size_	FqBuffer.h	/^	int size_;$/;"	m	class:PreProcessTool::FqBuffer
size_	MetaProcessor.h	/^			boost::uint32_t size_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
size_controller	threadpool/detail/pool_core.hpp	/^    size_controller_type size_controller()$/;"	f	class:boost::threadpool::detail::pool_core
size_controller	threadpool/pool.hpp	/^    size_controller_type size_controller()$/;"	f	class:boost::threadpool::thread_pool
size_controller_type	threadpool/detail/pool_core.hpp	/^    typedef SizePolicyController<pool_type> size_controller_type;$/;"	t	class:boost::threadpool::detail::pool_core
size_controller_type	threadpool/pool.hpp	/^    typedef SizePolicyController<pool_core_type> size_controller_type;$/;"	t	class:boost::threadpool::thread_pool
size_policy_type	threadpool/detail/pool_core.hpp	/^    typedef SizePolicy<pool_type> size_policy_type;         \/\/!< Indicates the sizer's type.$/;"	t	class:boost::threadpool::detail::pool_core
size_policy_type	threadpool/pool.hpp	/^    typedef SizePolicy<pool_core_type> size_policy_type; $/;"	t	class:boost::threadpool::thread_pool
size_policy_type	threadpool/size_policies.hpp	/^    typedef typename Pool::size_policy_type size_policy_type;$/;"	t	class:boost::threadpool::resize_controller
smallInsertNum	Common.h	/^        unsigned long smallInsertNum;  \/\/samll inert number in raw data$/;"	m	struct:PreProcessTool::FqInfo
smallInsertNum	MetaCommon.h	/^	unsigned long smallInsertNum;  \/\/samll inert number in raw data$/;"	m	struct:MetaPreProcessTool::FqInfo
smithWatermanAign	DGEProcessor.cpp	/^	int DGEProcessor::smithWatermanAign(string query, string target) { \/\/ Smith-Waterman algorithm$/;"	f	class:DGEProcessTool::DGEProcessor
sortClean_	DGEProcessor.h	/^	map< unsigned long,vector<unsigned long> > sortClean_;$/;"	m	class:DGEProcessTool::DGEProcessor
splitFile	SRNAProcessor.cpp	/^	long RNAProcessor::splitFile(string &outpfx, string &inFile, vector<string> &outFiles)$/;"	f	class:SRNAProcessTool::RNAProcessor
standard_	DGEProcessor.h	/^	int standard_;$/;"	m	class:DGEProcessTool::DGEProcessor
static_size	threadpool/size_policies.hpp	/^    static_size(Pool volatile & pool)$/;"	f	class:boost::threadpool::static_size
static_size	threadpool/size_policies.hpp	/^  class static_size$/;"	c	namespace:boost::threadpool
statisticsDGE	DGEProcessor.cpp	/^	int DGEProcessor::statisticsDGE(PreProcessTool::Read &read, FqInfo &info)$/;"	f	class:DGEProcessTool::DGEProcessor
statisticsFA	SRNACleanFA.cpp	/^	int RNAProcessor::statisticsFA(PreProcessTool::Read &read, FqInfo &info)$/;"	f	class:SRNAProcessTool::RNAProcessor
statisticsFQ	SRNACleanFQ.cpp	/^int RNAProcessor::statisticsFQ(PreProcessTool::Read &read, FqInfo &info)$/;"	f	class:SRNAProcessTool::RNAProcessor
statisticsPE	FilterProcessor.cpp	/^    bool FilterProcessor::statisticsPE(Read *reads1, Read *reads2, int index, FqInfo *info1, FqInfo *info2)$/;"	f	class:PreProcessTool::FilterProcessor
statisticsPE	MetaProcessor.cpp	/^	bool MetaProcessor::statisticsPE(PreProcessTool::Read *read1, PreProcessTool::Read* read2, FqInfo *info1, FqInfo* info2, int index)$/;"	f	class:MetaPreProcessTool::MetaProcessor
statisticsSE	FilterProcessor.cpp	/^    bool FilterProcessor::statisticsSE(Read *reads, int index, FqInfo *info)$/;"	f	class:PreProcessTool::FilterProcessor
statisticsTmp	MetaProcessor.cpp	/^	void MetaProcessor::statisticsTmp(PreProcessTool::Read *read, FqInfo &info)$/;"	f	class:MetaPreProcessTool::MetaProcessor
strict_	SRNAProcessor.h	/^			bool strict_;$/;"	m	class:SRNAProcessTool::RNAProcessor
sumQuality	FilterProcessor.h	/^	int  sumQuality;$/;"	m	struct:PreProcessTool::StatisResult
t	DGEProcessor.h	/^	int a, c, g, t, n, ns; \/\/ns 是指第截取tag的碱基N的个数\/\/$/;"	m	struct:DGEProcessTool::StatisInfo
t	FilterProcessor.h	/^	int a, c, g, t, n;$/;"	m	struct:PreProcessTool::StatisInfo
t	MetaProcessor.h	/^		int a, c, g, t, n;$/;"	m	struct:MetaPreProcessTool::StatisInfo
t	SRNAProcessor.h	/^		int a, c, g, t, n, ns; \/\/ns 是指第1-30个碱基内的N个数\/\/$/;"	m	struct:SRNAProcessTool::StatisInfo
tagEnd_	DGEProcessor.h	/^	int tagEnd_;$/;"	m	class:DGEProcessTool::DGEProcessor
tagLength_	DGEProcessor.h	/^	int tagLength_;$/;"	m	class:DGEProcessTool::DGEProcessor
tagPercent	DGEProcessor.h	/^	long tagPercent[7][2];$/;"	m	class:DGEProcessTool::DGEProcessor
tagPercent	SRNAProcessor.h	/^			long tagPercent[7];$/;"	m	class:SRNAProcessTool::RNAProcessor
tagSequence_	DGEProcessor.h	/^	map<string,int> tagSequence_;$/;"	m	class:DGEProcessTool::DGEProcessor
tagStart_	DGEProcessor.h	/^	int tagStart_;$/;"	m	class:DGEProcessTool::DGEProcessor
tailTrim2_	FilterProcessor.h	/^	int tailTrim2_;$/;"	m	class:PreProcessTool::FilterProcessor
tailTrim_	DGEProcessor.h	/^	int tailTrim_;$/;"	m	class:DGEProcessTool::DGEProcessor
tailTrim_	FilterProcessor.h	/^	int tailTrim_;   \/\/trim the 3' end of read some bp$/;"	m	class:PreProcessTool::FilterProcessor
tailTrim_	SRNAProcessor.h	/^			int tailTrim_;$/;"	m	class:SRNAProcessTool::RNAProcessor
task	FilterProcessor.cpp	/^    void FilterProcessor::task(TaskParam *param)$/;"	f	class:PreProcessTool::FilterProcessor
task	MetaProcessor.cpp	/^	void MetaProcessor::task(TaskParam *param)$/;"	f	class:MetaPreProcessTool::MetaProcessor
taskDGE	DGEProcessor.cpp	/^	void DGEProcessor::taskDGE(TaskParam *param)$/;"	f	class:DGEProcessTool::DGEProcessor
taskFA	SRNACleanFA.cpp	/^	void RNAProcessor::taskFA(TaskParam *param)$/;"	f	class:SRNAProcessTool::RNAProcessor
taskFQ	SRNACleanFQ.cpp	/^void RNAProcessor::taskFQ(TaskParam *param)$/;"	f	class:SRNAProcessTool::RNAProcessor
task_finished	threadpool/size_policies.hpp	/^    void task_finished() {}$/;"	f	class:boost::threadpool::static_size
task_func	threadpool/task_adaptors.hpp	/^  typedef function0<void> task_func;$/;"	t	namespace:boost::threadpool
task_scheduled	threadpool/size_policies.hpp	/^    void task_scheduled() {}$/;"	f	class:boost::threadpool::static_size
task_type	threadpool/detail/pool_core.hpp	/^    typedef Task task_type;                                 \/\/!< Indicates the task's type.$/;"	t	class:boost::threadpool::detail::pool_core
task_type	threadpool/pool.hpp	/^    typedef Task task_type;                                   \/\/!< Indicates the task's type.$/;"	t	class:boost::threadpool::thread_pool
task_type	threadpool/scheduling_policies.hpp	/^    typedef Task task_type;  \/\/!< Indicates the scheduler's task type.$/;"	t	class:boost::threadpool::lifo_scheduler
task_type	threadpool/scheduling_policies.hpp	/^    typedef Task task_type; \/\/!< Indicates the scheduler's task type.$/;"	t	class:boost::threadpool::fifo_scheduler
task_type	threadpool/scheduling_policies.hpp	/^    typedef Task task_type; \/\/!< Indicates the scheduler's task type.$/;"	t	class:boost::threadpool::prio_scheduler
terminate_all_workers	threadpool/detail/pool_core.hpp	/^    void terminate_all_workers(bool const wait) volatile$/;"	f	class:boost::threadpool::detail::pool_core
threadNum_	DGEProcessor.h	/^	int threadNum_;$/;"	m	class:DGEProcessTool::DGEProcessor
threadNum_	SRNAProcessor.h	/^			int threadNum_;$/;"	m	class:SRNAProcessTool::RNAProcessor
thread_pool	threadpool/pool.hpp	/^    thread_pool(size_t initial_threads = 0)$/;"	f	class:boost::threadpool::thread_pool
thread_pool	threadpool/pool.hpp	/^  class thread_pool $/;"	c	namespace:boost::threadpool
threadpool	threadpool/detail/future.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
threadpool	threadpool/detail/locking_ptr.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
threadpool	threadpool/detail/pool_core.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
threadpool	threadpool/detail/scope_guard.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
threadpool	threadpool/detail/worker_thread.hpp	/^namespace boost { namespace threadpool { namespace detail $/;"	n	namespace:boost
threadpool	threadpool/future.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
threadpool	threadpool/pool.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
threadpool	threadpool/pool_adaptors.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
threadpool	threadpool/scheduling_policies.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
threadpool	threadpool/shutdown_policies.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
threadpool	threadpool/size_policies.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
threadpool	threadpool/task_adaptors.hpp	/^namespace boost { namespace threadpool$/;"	n	namespace:boost
tile	FqBuffer.h	/^	char tile[5];$/;"	m	class:PreProcessTool::FqBuffer
tile	PeBuffer.h	/^	char tile[5];$/;"	m	class:PreProcessTool::PeBuffer
tiles_	DGEProcessor.h	/^	set<int> tiles_;$/;"	m	class:DGEProcessTool::DGEProcessor
tiles_	FilterProcessor.h	/^	set<int> tiles_;$/;"	m	class:PreProcessTool::FilterProcessor
tiles_	FqBuffer.h	/^	set<int> tiles_;$/;"	m	class:PreProcessTool::FqBuffer
tiles_	MetaProcessor.h	/^			set<int> tiles_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
tiles_	PeBuffer.h	/^	set<int> tiles_;$/;"	m	class:PreProcessTool::PeBuffer
tiles_	SRNAProcessor.h	/^			set<int> tiles_;$/;"	m	class:SRNAProcessTool::RNAProcessor
timed_wait	threadpool/detail/future.hpp	/^  bool timed_wait(boost::xtime const & timestamp) const$/;"	f	class:boost::threadpool::detail::future_impl
timed_wait	threadpool/future.hpp	/^  bool timed_wait(boost::xtime const & timestamp) const$/;"	f	class:boost::threadpool::future
tmpFile_	SRNAProcessor.h	/^			vector<string> tmpFile_;$/;"	m	class:SRNAProcessTool::RNAProcessor
top	threadpool/scheduling_policies.hpp	/^    task_type const & top() const$/;"	f	class:boost::threadpool::fifo_scheduler
top	threadpool/scheduling_policies.hpp	/^    task_type const & top() const$/;"	f	class:boost::threadpool::lifo_scheduler
top	threadpool/scheduling_policies.hpp	/^    task_type const & top() const$/;"	f	class:boost::threadpool::prio_scheduler
totalAdapterNum	Common.h	/^        unsigned long totalAdapterNum;$/;"	m	struct:PreProcessTool::FqInfo
totalAdapterNum	MetaCommon.h	/^	unsigned long totalAdapterNum;$/;"	m	struct:MetaPreProcessTool::FqInfo
totalDuplicationNum	Common.h	/^        unsigned long totalDuplicationNum;$/;"	m	struct:PreProcessTool::FqInfo
totalDuplicationNum	MetaCommon.h	/^	unsigned long totalDuplicationNum;$/;"	m	struct:MetaPreProcessTool::FqInfo
totalLowMeanNum	Common.h	/^        unsigned long totalLowMeanNum;$/;"	m	struct:PreProcessTool::FqInfo
totalLowMeanNum	MetaCommon.h	/^	unsigned long totalLowMeanNum;$/;"	m	struct:MetaPreProcessTool::FqInfo
totalLowQualNum	Common.h	/^        unsigned long totalLowQualNum;$/;"	m	struct:PreProcessTool::FqInfo
totalLowQualNum	MetaCommon.h	/^	unsigned long totalLowQualNum;$/;"	m	struct:MetaPreProcessTool::FqInfo
totalNExceedNum	Common.h	/^        unsigned long totalNExceedNum;$/;"	m	struct:PreProcessTool::FqInfo
totalNExceedNum	MetaCommon.h	/^	unsigned long totalNExceedNum;$/;"	m	struct:MetaPreProcessTool::FqInfo
totalPolyANum	Common.h	/^        unsigned long totalPolyANum;$/;"	m	struct:PreProcessTool::FqInfo
totalPolyNNum	MetaCommon.h	/^	unsigned long totalPolyNNum;$/;"	m	struct:MetaPreProcessTool::FqInfo
totalSmallInsertNum	Common.h	/^        unsigned long totalSmallInsertNum;$/;"	m	struct:PreProcessTool::FqInfo
totalSmallInsertNum	MetaCommon.h	/^	unsigned long totalSmallInsertNum;$/;"	m	struct:MetaPreProcessTool::FqInfo
trimAdapter	DGEProcessor.cpp	/^	void DGEProcessor::trimAdapter(char *sequence, int startPos)$/;"	f	class:DGEProcessTool::DGEProcessor
trimAdapter	SRNAProcessor.cpp	/^	void RNAProcessor::trimAdapter(char *sequence, int startPos)$/;"	f	class:SRNAProcessTool::RNAProcessor
trimLeft1_	MetaProcessor.h	/^			int trimLeft1_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
trimLeft2_	MetaProcessor.h	/^			int trimLeft2_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
trim_	MetaProcessor.h	/^			bool trim_;$/;"	m	class:MetaPreProcessTool::MetaProcessor
trim_	SRNAProcessor.h	/^			bool trim_;$/;"	m	class:SRNAProcessTool::RNAProcessor
upper	Common.cpp	/^	void upper(char* str)$/;"	f	namespace:PreProcessTool
upper	MetaCommon.cpp	/^	void upper(char* str)$/;"	f	namespace:MetaPreProcessTool
usage	Main.cpp	/^int usage()$/;"	f
wait	threadpool/detail/future.hpp	/^  void wait() const volatile$/;"	f	class:boost::threadpool::detail::future_impl
wait	threadpool/detail/pool_core.hpp	/^    bool wait(xtime const & timestamp, size_t const task_threshold = 0) const volatile$/;"	f	class:boost::threadpool::detail::pool_core
wait	threadpool/detail/pool_core.hpp	/^    void wait(size_t const task_threshold = 0) const volatile$/;"	f	class:boost::threadpool::detail::pool_core
wait	threadpool/future.hpp	/^  void wait() const$/;"	f	class:boost::threadpool::future
wait	threadpool/pool.hpp	/^    bool wait(xtime const & timestamp, size_t task_threshold = 0) const$/;"	f	class:boost::threadpool::thread_pool
wait	threadpool/pool.hpp	/^    void wait(size_t task_threshold = 0) const$/;"	f	class:boost::threadpool::thread_pool
wait_for_active_tasks	threadpool/shutdown_policies.hpp	/^  class wait_for_active_tasks$/;"	c	namespace:boost::threadpool
wait_for_all_tasks	threadpool/shutdown_policies.hpp	/^  class wait_for_all_tasks$/;"	c	namespace:boost::threadpool
worker_destructed	threadpool/detail/pool_core.hpp	/^    void worker_destructed(shared_ptr<worker_type> worker) volatile$/;"	f	class:boost::threadpool::detail::pool_core
worker_died_unexpectedly	threadpool/detail/pool_core.hpp	/^    void worker_died_unexpectedly(shared_ptr<worker_type> worker) volatile$/;"	f	class:boost::threadpool::detail::pool_core
worker_died_unexpectedly	threadpool/size_policies.hpp	/^    void worker_died_unexpectedly(size_t const new_worker_count)$/;"	f	class:boost::threadpool::static_size
worker_thread	threadpool/detail/worker_thread.hpp	/^    worker_thread(shared_ptr<pool_type> const & pool)$/;"	f	class:boost::threadpool::detail::worker_thread
worker_thread	threadpool/detail/worker_thread.hpp	/^  class worker_thread$/;"	c	namespace:boost::threadpool::detail
worker_type	threadpool/detail/pool_core.hpp	/^    typedef worker_thread<pool_type> worker_type;$/;"	t	class:boost::threadpool::detail::pool_core
~FqBuffer	FqBuffer.cpp	/^FqBuffer::~FqBuffer()$/;"	f	class:PreProcessTool::FqBuffer
~FqFile	FqFile.h	/^    ~FqFile()$/;"	f	class:PreProcessTool::FqFile
~PeBuffer	PeBuffer.cpp	/^	PeBuffer::~PeBuffer()$/;"	f	class:PreProcessTool::PeBuffer
~ReadSeq	Common.h	/^        ~ReadSeq()$/;"	f	struct:PreProcessTool::ReadSeq
~ReadSeq	MetaCommon.h	/^	~ReadSeq()$/;"	f	struct:MetaPreProcessTool::ReadSeq
~locking_ptr	threadpool/detail/locking_ptr.hpp	/^    ~locking_ptr()$/;"	f	class:boost::threadpool::detail::locking_ptr
~pool_core	threadpool/detail/pool_core.hpp	/^    ~pool_core()$/;"	f	class:boost::threadpool::detail::pool_core
~scope_guard	threadpool/detail/scope_guard.hpp	/^	~scope_guard()$/;"	f	class:boost::threadpool::detail::scope_guard
